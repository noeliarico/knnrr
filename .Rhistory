# if(filter != "") {
#   ddata <- data %>% file(rr = filter)
# }
#
data_d <- bind_rows(rdata, ddata) %>% bind_rows(ddata)
data_all <- data_all  %>% bind_rows(data_d)
}
else {
data_d <- get(d)
if(rm %in% colnames(data_d)) {
metric <- rm
}
else {
metric <- paste0("Mean_", rm)
}
data_d <- data_d %>%
#filter({{metric}} >= low_limit) %>%
#select(k, method, {{metric}}) %>%
mutate(dataset = d) %>%
rename(metric = metric)
data_all <- data_all  %>% bind_rows(data_d)
}
}
# all_data <- all_data %>%
#   mutate(method = fct_recode(method, #minkowski_p3 = "3", minkowski_p4 = "4",
#                              t2_approval = "two", t3_approval = "three",
#                              t5_approval = "five",  t7_approval = "seven"))
results <- data_all %>%
filter(k  == the_k) %>%
mutate(k = NULL,
method = factor(method),
dataset = factor(dataset))
results$dataset <- factor(results$dataset, levels = datasets)
print(head(results))
if(input == "numerical") {
results <- results %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "chebyshev"))
}
if(input == "mixed") {
results <- results %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "gower"))
}
results <- results %>% filter(method %in% c("borda_count", get_distances(input)))
ggplot(results, aes(x = metric, y = dataset)) +
geom_line() +
geom_point(aes(col = method, size = method, shape = method), alpha = 0.8) +
scale_size_manual(values=c(4, 2, 2, 2)) +
scale_shape_manual(values=c(17, 16, 16, 16)) +
labs(x = rm) +
ggtitle(paste("k =", k))
}
metric <- "Balanced_Accuracy"
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(mixed$name, metric = metric, the_k = x, caret = TRUE, input = "mixed"))
compare_type <- function(datasets, metric, caret = TRUE, breakties = "randomly", the_k = 1, input = "numerical") {
data_all <- tibble()
rm <- metric
for(d in datasets) {
print(d)
if(caret) {
rdata <- get(paste0("fit_", d, "_r"))
ddata <- get(paste0("fit_", d, "_d"))
rdata <- rdata$results
ddata <- ddata$results
if(rm %in% colnames(rdata)) {
metric <- rm
}
else {
metric <- paste0("Mean_", rm)
}
rdata <- rdata %>%
filter(ties == "randomly") %>%
select(k, rr, {{metric}}) %>%
mutate(method = rr,
rr = NULL,
type = "rr",
dataset = d) %>%
rename(metric = metric)
ddata <- ddata %>%
filter(ties == "randomly") %>%
#filter({{metric}} >= low_limit) %>%
select(k, distance, {{metric}}) %>%
mutate(method = distance,
distance = NULL,
type = "distance",
dataset = d) %>%
rename(metric = metric)
# if(filter != "") {
#   ddata <- data %>% file(rr = filter)
# }
#
data_d <- bind_rows(rdata, ddata) %>% bind_rows(ddata)
data_all <- data_all  %>% bind_rows(data_d)
}
else {
data_d <- get(d)
if(rm %in% colnames(data_d)) {
metric <- rm
}
else {
metric <- paste0("Mean_", rm)
}
data_d <- data_d %>%
#filter({{metric}} >= low_limit) %>%
#select(k, method, {{metric}}) %>%
mutate(dataset = d) %>%
rename(metric = metric)
data_all <- data_all  %>% bind_rows(data_d)
}
}
# all_data <- all_data %>%
#   mutate(method = fct_recode(method, #minkowski_p3 = "3", minkowski_p4 = "4",
#                              t2_approval = "two", t3_approval = "three",
#                              t5_approval = "five",  t7_approval = "seven"))
results <- data_all %>%
filter(k  == the_k) %>%
mutate(k = NULL,
method = factor(method),
dataset = factor(dataset))
results$dataset <- factor(results$dataset, levels = datasets)
print(head(results))
if(input == "numerical") {
results <- results %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "chebyshev"))
}
if(input == "mixed") {
results <- results %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "gower"))
}
results <- results %>% filter(method %in% c("borda_count", get_distances(input)))
ggplot(results, aes(x = metric, y = dataset)) +
geom_line() +
geom_point(aes(col = method, size = method, shape = method), alpha = 0.8) +
scale_size_manual(values=c(4, 2, 2, 2)) +
scale_shape_manual(values=c(17, 16, 16, 16)) +
labs(x = rm) +
ggtitle(paste("k =", the_k))
}
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(mixed$name, metric = metric, the_k = x, caret = TRUE, input = "mixed"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(numerical$name, metric = metric, the_k = x, caret = TRUE, input = "mixed"))
warnings()
numerical$name
unique(numerical$name)
trained <- c(
"caesarian",
"cpu_discretized",
"ecoli",
"ecoli4",
"ecoli_0_vs_1",
"ecoli_0_1_4_6_vs_5",
"ecoli_0_1_4_7_vs_2_3_5_6",
"ecoli_0_1_4_7_vs_5_6",
"ecoli_0_6_7_vs_5",
"filtered_ecoli",
"flags",
"iris",
"iris0",
"glass",
"glass0",
"glass1",
"glass2",
"glass4",
"glass5",
"glass6",
"haberman",
"ionospheren",
"life_expectancy",
"mini_abalone_sex",
"mini_adult",
"mini_audit_risk",
"mini_balancen",
"mini_banknote",
"mini_contraceptive",
"mini_contraceptiven",
"mini_egg_eye_state",
#"hayes_rothn",
"mini_mammographic_masses",
"mini_penbased",
#"mini_shuttle",
"mini_skin",
"mini_weight_height",
"mini_wifi_localization",
#"mini_yeast",
"new_thyroid",
"seeds",
"sonar",
"statlog",
"teaching_assistant",
"travel_insurance",
"vertebral_column2",
"vertebral_column3",
"wine",
"wisconsin",
"yeast_0_3_5_9_vs_7_8"
#"yeast",
#"yeast6"
)
numerical <- data_trained %>% filter(type == "numerical")
numerical
(numerical$name)
numerical$name[-22,]
numerical$name[-22]
metric <- "Balanced_Accuracy"
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(numerical$name[-22], metric = metric, the_k = x, caret = TRUE, input = "mixed"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
numerical_binary$name
metric <- "Balanced_Accuracy"
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(numerical_binary$name[-18], metric = metric, the_k = x, caret = TRUE, input = "mixed"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(ks, function(x) compare_type(numerical$name[-22], metric = metric, the_k = x, caret = TRUE, input = "numerical"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(ks, function(x) compare_type(numerical_binary$name[-18], metric = metric, the_k = x, caret = TRUE, input = "numerical"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
numerical_binary_imb1
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(numerical_binary_imb1$name[-8], metric = metric, the_k = x, caret = TRUE, input = "numerical"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
ks <- c(1, 2, 3, 5, 7)
all_plots <- lapply(ks, function(x) compare_type(numerical_binary_imb2$name[-8], metric = metric, the_k = x, caret = TRUE, input = "numerical"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
numerical_binary_imb2
all_plots <- lapply(ks, function(x) compare_type(numerical_binary_imb2$name, metric = metric, the_k = x, caret = TRUE, input = "numerical"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(ks, function(x) compare_type(numerical_multiclass$name, metric = metric, the_k = x, caret = TRUE, input = "numerical"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(ks, function(x) compare_type(mixed$name, metric = metric, the_k = x, caret = TRUE, input = "mixed"))
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
lista_numerical
lista_numerical_binary[[1]]
lista <- lapply(trained, metric = "Balanced_Accuracy", juntar)
names(lista) <- trained
lista_numerical <- lapply(numerical$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical)
(lista_numerical)
lista_numerical <- lapply(numerical$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical) <- numerical$name
save(lista_numerical, file = "lista_numerical.RData")
names(lista_numerical)
mini_abalone_sex
fit_mini_abalone_sex_d
fit_mini_abalone_sex_r
out <- fitNum(mini_abalone_sex)
fit_mini_abalone_sex_d <- out$fitd
fit_mini_abalone_sex_r <- out$fitr
fit_mini_abalone_sex_d
all_plots <- lapply(numerical$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
figure
all_plots <- lapply(numerical$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_multiclass$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
lista <- lapply(trained, metric = "Balanced_Accuracy", juntar)
names(lista) <- trained
lista_numerical <- lapply(numerical$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical) <- numerical$name
save(lista_numerical, file = "lista_numerical.RData")
unlist(lista_numerical)
sapply(lista_numerical, function(x) unique(x$method))
"gower" %in% sapply(lista_numerical, function(x) unique(x$method)))
"gower" %in% unlist(sapply(lista_numerical, function(x) unique(x$method))))
lista_numerical <- lapply(numerical$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical) <- numerical$name
save(lista_numerical, file = "lista_numerical.RData")
lista_numerical_binary <- lapply(numerical_binary$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical_binary) <- numerical_binary$name
save(lista_numerical_binary, file = "lista_numerical_binary.RData")
lista_numerical_binary_imb1 <- lapply(numerical_binary_imb1$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical_binary_imb1) <- numerical_binary_imb1$name
save(lista_numerical_binary_imb1, file = "lista_numerical_binary_imb1.RData")
lista_numerical_binary_imb2 <- lapply(numerical_binary_imb2$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical_binary_imb2) <- numerical_binary_imb2$name
save(lista_numerical_binary_imb2, file = "lista_numerical_binary_imb2.RData")
lista_numerical_multiclass <- lapply(numerical_multiclass$name, metric = "Balanced_Accuracy", juntar)
names(lista_numerical_multiclass) <- numerical_multiclass$name
save(lista_numerical_multiclass, file = "lista_numerical_multiclass.RData")
lista_mixed <- lapply(mixed$name, metric = "Balanced_Accuracy", juntar)
names(lista_mixed) <- mixed$name
save(lista_mixed, file = "lista_mixed.RData")
lista_mixed_binary <- lapply(mixed_binary$name, metric = "Balanced_Accuracy", juntar)
names(lista_mixed_binary) <- mixed_binary$name
save(lista_mixed_binary, file = "lista_mixed_binary.RData")
lista_mixed_multiclass <- lapply(mixed_multiclass$name, metric = "Balanced_Accuracy", juntar)
names(lista_mixed_multiclass) <- mixed_multiclass$name
save(lista_mixed_multiclass, file = "lista_mixed_multiclass.RData")
fit_cpu_discretized_d
cpu
data_info
output_details(data_trained)
output_details(data_info %>% filter(name %in% data_trained))
library(tidyverse)
output_details(data_info %>% filter(name %in% data_trained))
output_details(data_trained)
library(flue)
library(glue)
output_details(data_trained)
data_trained
xtable(data_trained %>% arrange(name), digits = 2, include.rownames = FALSE)
library(xtable)
xtable(data_trained %>% arrange(name), digits = 2, include.rownames = FALSE)
data_trained
xtable(data_trained %>% arrange(name) %>% select(-class_names), digits = 2, include.rownames = FALSE)
data_trained
xtable(data_trained %>% arrange(name) %>% select(-class_names, -type), digits = 2, include.rownames = FALSE)
print(xtable(data_trained %>% arrange(name) %>% select(-class_names, -type), digits = 2), include.rownames = FALSE)
?knn
lista_mixed
all_plots <- lapply(numerical_binary_imb1$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
library(ggforce)
all_plots <- lapply(numerical_binary_imb1$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
??ggarrange
library(ggpubr)
all_plots <- lapply(numerical_binary_imb1$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary_imb2$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_multiclass$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
lista_numerical_binary_imb1
lista_numerical_binary_imb1
length(lista_numerical_binary_imb1)
length(lista_numerical_binary_imb2)
length(lista_numerical_multiclass)
length(lista_mixed)
length(noisy_data_info)
noisy_data_info
lista_numerical_binary_imb1
sapply(lista_numerical_binary_imb1, bind_rows)
apply(lista_numerical_binary_imb1, bind_rows)
lapply(lista_numerical_binary_imb1, bind_rows)
mean(lapply(lista_numerical_binary_imb1, bind_rows), BalancedAccuracy)
mean(lapply(lista_numerical_binary_imb1, bind_rows) %>% select(BalancedAccuracy))
lapply(lista_numerical_binary_imb1, bind_rows)
length(lapply(lista_numerical_binary_imb1, bind_rows))
bind_rows(list_of_dataframes, .id = "BalancedAccuracy")
bind_rows(lista_numerical_binary_imb1, .id = "BalancedAccuracy")
mean(bind_rows(lista_numerical_binary_imb1, .id = "BalancedAccuracy"))
bind_rows(lista_numerical_binary_imb1, .id = "BalancedAccuracy")
bind_rows(lista_numerical_binary_imb1)
bind_rows(lista_numerical_binary_imb1)
bind_rows(lista_numerical_binary_imb1)
bind_rows(lista_numerical_binary_imb1)$BalancedAccuracy
imb1 <- bind_rows(lista_numerical_binary_imb1)
imb1$Balanced_Accuracy
mean(imb1$Balanced_Accuracy)
median(imb1$Balanced_Accuracy)
imb1 <- bind_rows(lista_numerical_binary_imb1)
mean(imb1$Balanced_Accuracy)
median(imb1$Balanced_Accuracy)
imb2 <- bind_rows(lista_numerical_binary_imb2)
mean(imb1$Balanced_Accuracy)
median(imb1$Balanced_Accuracy)
mean(imb1$Balanced_Accuracy)
median(imb1$Balanced_Accuracy)
mean(imb2$Balanced_Accuracy)
median(imb2$Balanced_Accuracy)
all_plots <- lapply(numerical_binary_imb1$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
numerical_binary_imb1$name
all_plots
all_plots <- lapply(numerical_binary_imb1$name[-10], append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_multiclass$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
lista_numerical_binary_imb1
imb1
imb1 %>% filter(method %in% c("borda_count", "manhattan", "euclidean", "chebyshev"))
imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev"))
min(imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")))
min(imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev"))$Balanced_Accuracy)
min(imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")))
imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev"))
imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")) %>% select(Balanced_Accuracy)
min(imb1 %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")) %>% select(Balanced_Accuracy))
lista_numerical_binary_imb1
function(x) {x %>% group_by(method) %>% min(Balanced_Accuracy)}
fmin <- function(x) {x %>% group_by(method) %>% min(Balanced_Accuracy)}
lapply(lista_numerical_binary_imb1, fmin)
lista_numerical_binary_imb1
lista_numerical_binary_imb1[[1]]
lista_numerical_binary_imb1[[1]] %>% group_by(method, k)
lista_numerical_binary_imb1[[1]] %>% group_by(method, k) %>% select(method == "borda_count")
lista_numerical_binary_imb1[[1]] %>% select(method == "borda_count")
lista_numerical_binary_imb1[[1]] %>% filter(method == "borda_count") %>% group_by(method, k)
lista_numerical_binary_imb1[[1]] %>% filter(method == -"borda_count") %>% group_by(method, k)
lista_numerical_binary_imb1[[1]] %>% filter(method != "borda_count") %>% group_by(method, k)
lista_numerical_binary_imb1[[1]] %>% filter(method != "borda_count") %>% group_by(k) %>% min(Balanced_Accuracy)
lista_numerical_binary_imb1[[1]] %>% filter(method != "borda_count") %>% group_by(k) %>% min("Balanced_Accuracy")
lista_numerical_binary_imb1[[1]] %>% filter(method != "borda_count") %>% group_by(k)
lista_numerical_binary_imb1[[1]] %>% filter(method != "borda_count") %>% group_by(k) %>% min()
lista_numerical_binary_imb1[[1]] %>% filter(method %in% c("manhattan", "eculidean", "chebyshev") %>% group_by(k) %>% min()
)
lista_numerical_binary_imb1[[1]] %>% filter(method %in% c("manhattan", "eculidean", "chebyshev")) %>% group_by(k)
lista_numerical_binary_imb1[[1]] %>% filter(method %in% c("manhattan", "eculidean", "chebyshev")) %>% group_by(k) %>% summarise(min(Balanced_Accuracy))
lista_numerical_binary_imb1[[1]] %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")) %>% group_by(k) %>% summarise(min(Balanced_Accuracy))
lista_numerical_binary_imb1[[1]] %>% filter(method %in% c("manhattan", "euclidean", "chebyshev"))
lista_numerical_binary_imb1[[1]] %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")) %>% group_by(k) %>% summarise(min(Balanced_Accuracy))
fmin <- function(x) {x %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")) %>% group_by(k) %>% summarise(min(Balanced_Accuracy))}
lapply(lista_numerical_binary_imb1, fmin)
lapply(lista_numerical_binary_imb1, fmin)
fmax <- function(x) {x %>% filter(method %in% c("manhattan", "euclidean", "chebyshev")) %>% group_by(k) %>% summarise(max(Balanced_Accuracy))}
lapply(lista_numerical_binary_imb1, fmin)
lapply(lista_numerical_binary_imb1, fmin)
lapply(lista_numerical_binary_imb1, fmin)
lapply(lista_numerical_binary_imb1, fmax)
imb1_min <- lapply(lista_numerical_binary_imb1, fmin)
imb1_max <- lapply(lista_numerical_binary_imb1, fmax)
fmaxb <- function(x) {x %>% filter(method %in% c("borda_count")) %>% group_by(k) %>% summarise(max(Balanced_Accuracy))}
lapply(lista_numerical_binary_imb1, fmaxb)
fmaxb <- function(x) {x %>% filter(method %in% c("borda_count")) %>% select("Balanced_Accuracy")}
lapply(lista_numerical_binary_imb1, fmaxb)
imb1borda <- lapply(lista_numerical_binary_imb1, fmaxb)
imb1borda
bind_rows(imb1borda)
imb1borda
?wilcox.test
calcular_media <- function(x) x[1]
lapply(imb1borda, calcular_media
)
lapply(imb1borda, calcular_media)
calcular_media <- function(x) x[1,]
lapply(imb1borda, calcular_media)
unlist(lapply(imb1borda, calcular_media))
mean(unlist(lapply(imb1borda, calcular_media)))
media_borda <- mean(unlist(lapply(imb1borda, calcular_media)))
imb1_max
mean(unlist(lapply(imb1_max, calcular_media)))
media_max <- mean(unlist(lapply(imb1_max, calcular_media)))
media_max <- mean(unlist(lapply(imb1_min, calcular_media)))
media_borda
media_max
media_min
media_max <- mean(unlist(lapply(imb1_max, calcular_media)))
media_min <- mean(unlist(lapply(imb1_min, calcular_media)))
media_borda
media_max
media_min
calcular_media <- function(x) x[5,]
media_min <- mean(unlist(lapply(imb1_min, calcular_media)))
media_max <- mean(unlist(lapply(imb1_max, calcular_media)))
media_borda <- mean(unlist(lapply(imb1borda, calcular_media)))
media_borda
media_min
calcular_media <- function(x) x[5,]
unlist(lapply(imb1borda, calcular_media))
mean(unlist(lapply(imb1_min, calcular_media)))
imb1_min
lapply(imb1_min, calcular_media)
unlist(lapply(imb1_min, calcular_media))
unlist(lapply(imb1_min, calcular_media))
unlist(lapply(imb1_min %>% select(k), calcular_media))
unlist(lapply(imb1_min %>% select(Balanced_Accuracy), calcular_media))
imb1_min %>% select(Balanced_Accuracy), calcular_media)
imb1_min %>% select(Balanced_Accuracy, calcular_media)
unlist(lapply(imb1_min %>% select(Balanced_Accuracy), calcular_media))
imb1_max
lapply(imb1_max, function(x) x[5,] %>% select(max(Balanced_Accuracy)))
lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy))")
)
lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy)"))
unlist(lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy)")))
mean(unlist(lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy)"))))
imb1k5max <- mean(unlist(lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy)"))))
imb1k5min <- mean(unlist(lapply(imb1_min, function(x) x[5,] %>% select("min(Balanced_Accuracy)"))))
calcular_media
media_borda <- mean(unlist(lapply(imb1borda, calcular_media)))
imb1k5max
imb1k5min
media_borda
imb1k5max <- media(unlist(lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy)"))))
imb1k5max <- median(unlist(lapply(imb1_max, function(x) x[5,] %>% select("max(Balanced_Accuracy)"))))
imb1k5min <- median(unlist(lapply(imb1_min, function(x) x[5,] %>% select("min(Balanced_Accuracy)"))))
media_borda <- median(unlist(lapply(imb1borda, calcular_media)))
imb1k5max
imb1k5min
media_borda
imb1
