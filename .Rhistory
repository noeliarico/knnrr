fit_caesarian_d
source('~/Desktop/Github/paper/plot_all.R', echo=TRUE)
figure
source('~/Desktop/Github/paper/view_rsults.R', echo=TRUE)
source('~/Desktop/Github/paper/view_rsults.R', echo=TRUE)
source('~/Desktop/Github/paper/plot_all.R', echo=TRUE)
figure
append_plot_ties <- function(name) {
paramr <- get(paste0("fit_", name, "_d"))
p <- compare_ties(paramd$results)
return(p)
}
all_plots <- lapply(data_list, append_plot_ties)
compare_ties
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
source('~/Desktop/Github/paper/distances/sets.R', echo=TRUE)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
set.seed(123)
fit_caesarian_r <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
head(mammographic_masses)
sapply(mammographic_masses, unique)
source('~/Desktop/Github/paper/binary_mixed.R', echo=TRUE)
source('~/Desktop/Github/paper/plot_all.R', echo=TRUE)
source('~/Desktop/Github/paper/plot_all.R', echo=TRUE)
figure
sample(1:3, 5, replace = T)
a <- sample(1:3, 5, replace = T)
b <- sample(1:3, 5, replace = T)
tibble(a, b)
tribble(a, b)
tribble(~a, ~b, a, b)
tribble(~a, ~b, ~c, ~e, ~d, a, b)
a
b
tribble(~a, ~b, ~c, ~e, ~d, a, b)
matrix(a, b, ncol = 5)
data <- matrix(a, b, ncol = 5)
dist(data, method = "maximum")
nrow(mammographic_masses)
a <- sample(1:10, 5, replace = T)
b <- sample(1:10, 5, replace = T)
data <- matrix(a, b, ncol = 5)
dist(data, method = "maximum")
a
b
data
a
b
data <- matrix(a, b, ncol = 5, nrow = 2)
data
dist(data, method = "maximum")
data <- matrix(a, b, ncol = 5, byrow = T)
daa
data
a
b
data <- matrix(c(a, b) ncol = 5, byrow = T)
data <- matrix(c(a, b), ncol = 5, byrow = T)
data
dist(data, method = "maximum")
head(mammographic_masses)
mammographic_masses <- as.data.frame(mammographic_masses)
sapply(mammographic_masses, class)
set.seed(123)
fit_mammographic_masses_d <- train(
x =  mammographic_masses[, -6],
y = mammographic_masses[, 6],
data = mammographic_masses,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
fit_mammographic_masses_d
set.seed(123)
fit_mammographic_masses_r <- train(
x =  mammographic_masses[, -6],
y = mammographic_masses[, 6],
data = mammographic_masses,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
nrow(mammographic_masses)
mammographic_masses <- as.data.frame(mammographic_masses)
set.seed(123)
mini_mammographic_masses <- createDataPartition(mammographic_masses$severity, p = 0.25, list = FALSE)
mini_mammographic_masses <- mammographic_masses[mini_mammographic_masses,]
set.seed(123)
fit_mammographic_masses_d <- train(
x =  mammographic_masses[, -6],
y = mammographic_masses[, 6],
data = mammographic_masses,
method = dknn,
preProcess = c("center", "scale", "range"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
warnings()
set.seed(123)
fit_mammographic_masses_d <- train(
x =  mammographic_masses[, -6],
y = mammographic_masses[, 6],
data = mammographic_masses,
method = dknn,
preProcess = c("range"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
set.seed(123)
fit_mammographic_masses_r <- train(
x =  mammographic_masses[, -6],
y = mammographic_masses[, 6],
data = mammographic_masses,
method = rknn,
preProcess = c("range"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
source('~/Desktop/Github/paper/binary_mixed.R', echo=TRUE)
num_binary <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_colum2")
num_multiclass <-c("filtered_ecoli", "iris", "life_expectancy", "seeds", "vertebral_column3", "wifi_localization", "mini_yeast")
mixed_binary <- c("caesarian", "mammographic_masses")
data_list <- mixed_binary
append_plot <- function(name) {
paramr <- get(paste0("fit_", name, "_r"))
paramd <- get(paste0("fit_", name, "_d"))
p <- compare_F1(paramr, paramd, name)
return(p)
}
all_plots <- lapply(data_list, append_plot)
mixed_binary <- c("caesarian", "mini_mammographic_masses")
data_list <- mixed_binary
append_plot <- function(name) {
paramr <- get(paste0("fit_", name, "_r"))
paramd <- get(paste0("fit_", name, "_d"))
p <- compare_F1(paramr, paramd, name)
return(p)
}
all_plots <- lapply(data_list, append_plot)
#library(ggpubr)
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
source('~/Desktop/Github/paper/distances/sets.R', echo=TRUE)
source('~/Desktop/Github/paper/distances/sets.R', echo=TRUE)
source('~/Desktop/Github/paper/experiments/experiments_setup.R', echo=TRUE)
set.seed(123)
mini_mammographic_masses <- createDataPartition(mammographic_masses$severity, p = 0.25, list = FALSE)
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
set.seed(123)
fit_caesarian_r <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
fit_caesarian_d
scaesarian <- caesarian[1:2,]
scaesarian
sapply(scaesarian, class)
daisy(scaesarian, metric = "gower")
as.matrix(daisy(scaesarian, metric = "gower"))
scaesarian <- caesarian[1:5,]
as.matrix(daisy(scaesarian, metric = "gower"))
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
source('~/Desktop/Github/paper/experiments/experiments_setup.R', echo=TRUE)
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
warnings()
predict(dummyVars(~.,caesarian[, -6]), caesarian)
head(predict(dummyVars(~.,caesarian[, -6]), caesarian))
scaesarian <- head(predict(dummyVars(~.,caesarian[, -6]), caesarian))
sapply(scaesarian, class)
head(caesarian)
sapply(caesarian, class)
daisy(caesarian, metric = "gower")
as.matrix(daisy(caesarian, metric = "gower"))
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
warnings()
head(caesarian)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
warnings()
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
caesarian$Age
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
caesarian$Age
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
fit_caesarian_d
set.seed(123)
fit_caesarian_r <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
source('~/Desktop/Github/paper/distances/custom_distances.R', echo=TRUE)
source('~/Desktop/Github/paper/plot_all.R', echo=TRUE)
figure
fit_caesarian_d
source('~/Desktop/Github/paper/binary_mixed.R', echo=TRUE)
source('~/Desktop/Github/paper/plot_all.R', echo=TRUE)
figure
?daisy
?daisy
source("load.R")
source('~/Desktop/Github/knnrr/new choose.R', echo=TRUE)
mini_zoo <- zoo %>% mutate(type = factor(zoo$type, levels = 1:7, labels = c("Mammal", "Bird", "Reptile", "Fish", "Amphibian", "Bug", "Invertebrate")))
mini_zoo <- mini_zoo %>% filter(type == "Fish" | type == "Bird" | type == "Invertebrate") %>%
#mutate_all(.funs=list(~as.numeric(.)))  %>%
#select_if(function(col) length(unique(col)) > 1)
select(-one_of("legs")) %>%
select_if(function(col) return(length(unique(col)) > 1))
set.seed(123)
indexes <- createDataPartition(mini_zoo$type, p = 0.5, list = FALSE)
mini_zoo <- zoo %>% mutate(type = factor(zoo$type, levels = 1:7, labels = c("Mammal", "Bird", "Reptile", "Fish", "Amphibian", "Bug", "Invertebrate")))
mini_zoo <- mini_zoo %>% filter(type == "Fish" | type == "Bird" | type == "Invertebrate") %>%
#mutate_all(.funs=list(~as.numeric(.)))  %>%
#select_if(function(col) length(unique(col)) > 1)
select(-one_of("legs")) %>%
select_if(function(col) return(length(unique(col)) > 1)) %>% droplevels()
set.seed(123)
indexes <- createDataPartition(mini_zoo$type, p = 0.5, list = FALSE)
mini_zoo <- mini_zoo[indexes,]
mini_zoo <- mini_zoo %>%
#mutate_all(.funs=list(~as.numeric(.)))  %>%
select_if(function(col) length(unique(col)) > 1)
set.seed(123)
indexes <- createDataPartition(mini_zoo$type, p = 0.8, list = FALSE)
mini_zoo_train <- mini_zoo[indexes,]
mini_zoo_test <- mini_zoo[-indexes,]
rm(indexes)
sink("zoo_jaccard_randomly")
sink()
library(caret)
library(dplyr)
library(nnet)
library(parallel)
set.seed(123)
indexes <- createDataPartition(iris$Species, times = 1, p = 0.08, list = FALSE)
mini_iris <- iris[indexes,]
set.seed(123)
train(x =  mini_iris[,-5],
y = mini_iris[,5],
data = mini_iris,
method = dknn,
trControl = fitControl,
tuneGrid = dgrid)
library(caret)
library(dplyr)
library(nnet)
library(parallel)
set.seed(123)
indexes <- createDataPartition(iris$Species, times = 1, p = 0.08, list = FALSE)
mini_iris <- iris[indexes,]
fitControl <- trainControl(method = "cv", number = 2)
mini_iris <- as.data.frame(mini_iris)
dgrid <-  expand.grid(k = c(1,2,3),
#distance = c(get_distances("categorical"), "jaccard_add", "jaccard_avg"),
distance = c("euclidean", "manhattan", "chebyshev"),
ties = c("randomly", "tthreshold"),
verbose = FALSE,
developer = FALSE)
set.seed(123)
head(mini_iris)
train(x =  mini_iris[,-5],
y = mini_iris[,5],
data = mini_iris,
method = dknn,
trControl = fitControl,
tuneGrid = dgrid)
warnings()
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
source('~/Desktop/Github/knnrr/distances/sets.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
mini_iris
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
mini_iris
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
library(devtools)
noelia_github <- "e878f2287a4e84b518fc9f774edc221a769d43ec"
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(devtools)
noelia_github <- "e878f2287a4e84b518fc9f774edc221a769d43ec"
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(devtools)
noelia_github <- "e878f2287a4e84b518fc9f774edc221a769d43ec"
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(devtools)
noelia_github <- "e1f45786c26a22da3e5a2ca3e412755955a0e870"
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(consensus)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
library(consensus)
three
detach("package:consensus", unload = TRUE)
library(consensus)
remove.packages("consensus")
library(devtools)
noelia_github <- "e1f45786c26a22da3e5a2ca3e412755955a0e870"
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(consensus)
consensus::three()
consensus::three
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/examples/train_mini_iris.R', echo=TRUE)
2+2
library(consensus)
remove.packages("consensus")
library(devtools)
noelia_github <- "e1f45786c26a22da3e5a2ca3e412755955a0e870"
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(devtools)
install_github("noeliarico/consensus",
subdir = "consensus",
auth_token = noelia_github,
force = TRUE)
library(devtools)
install_github("noeliarico/consensus",
subdir = "consensus",
force = TRUE)
library(consensus)
library(caret)
library(cluster)
library(foreign)
library(tidyverse)
library(parallel)
library(nnet)
library(usedist)
library(ade4)
consensus::plurality()
consensus::plurality
m <- matrixc(3,2,4,1,5,1), nrow = 5)
m <- matrix(c(3,2,4,1,5,1), nrow = 5)
m
m <- matrix(c(3,2,4,1,5,1), ncol = 5)
m
m <- matrix(c(3,2,4,1,5,1), ncol = 6)
m
colnames(m) <- letters[1:6]
profile_of_rankings(m)
plurality(profile_of_rankings(m), verbose = TRUE)
two(profile_of_rankings(m), verbose = TRUE)
m
source("load.R")
source('~/Desktop/Github/knnrr/experiments/train/binary/binary_categorical.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/train/numerical/binary_numerical.R', echo=TRUE)
rm(list = ls())
source('~/Desktop/Github/knnrr/methods/load_methods.R', echo=TRUE)
source('~/Desktop/Github/knnrr/methods/load_methods.R', echo=TRUE)
source('~/Desktop/Github/knnrr/methods/load_methods.R', echo=TRUE)
files <- list.files("methods", recursive = TRUE)
files
files <- list.files("methods", recursive = TRUE)
files
files <- list.files("methods", recursive = TRUE)
files
files <- list.files("methods", recursive = TRUE)
files
rm(list = ls())
files <- list.files("methods", recursive = TRUE)
files <- file.path(".", files)
files
files <- list.files("methods", recursive = TRUE)
files <- file.path("methods", files)
sapply(files, source)
View(predict.knn4)
rm(files)
source("data/load_data.R")
