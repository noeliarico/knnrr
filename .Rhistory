data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
sink()
sink("caesarean")
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
sink()
head(travel_insurance)
sapply(travel_insurance, unique)
travel_insurance <- as.data.frame(travel_insurance)
set.seed(123)
mini_travel_insurance <- createDataPartition(travel_insurance$claim, p = 0.015, list = FALSE)
mini_travel_insurance <- travel_insurance[mini_travel_insurance,]
set.seed(123)
fit_mini_travel_insurance_d <- train(
x =  mini_travel_insurance[, -5],
y = mini_travel_insurance[, 5],
data = mini_travel_insurance,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
set.seed(123)
fit_mini_travel_insurance_r <- train(
x =  mini_travel_insurance[, -5],
y = mini_travel_insurance[, 5],
data = mini_travel_insurance,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
compare_metric(fit_mini_travel_insurance_r, fit_mini_travel_insurance_d, metric = "F1", input = "mixed")
predict(dummyVars(~.,mini_travel_insurance), mini_travel_insurance)
vals <- predict(dummyVars(~.,mini_travel_insurance), mini_travel_insurance)
dm <- as.matrix(dist(vals, method = "manhattan"))
de <- as.matrix(dist(vals, method = "manhattan"))
dm
as.vector(dm)
plot(dm, de)
plot(dm, de)
head(caesarian)
head(mini_adult)
sapply(mini_adult, class)
nrow(mini_adult)
unique(fnlwgt)
unique(mini_adult$fnlwgt)
vals <- predict(dummyVars(~.,mini_travel_insurance), mini_travel_insurance)
dm <- as.vector(as.matrix(dist(vals, method = "manhattan")))
de <- as.vector(as.matrix(dist(vals, method = "euclidean")))
plot(dm, de)
mixed_binary
vals <- predict(dummyVars(~.,caesarian), caesarian)
dm <- as.vector(as.matrix(dist(vals, method = "manhattan")))
de <- as.vector(as.matrix(dist(vals, method = "euclidean")))
plot(dm, de)
vals <- predict(dummyVars(~.,mini_mammographic_masses), mini_mammographic_masses)
dm <- as.vector(as.matrix(dist(vals, method = "manhattan")))
de <- as.vector(as.matrix(dist(vals, method = "euclidean")))
plot(dm, de)
qplot(dm, de)
mix <- c(mix_binary, mix_multiclass)
# "acute_inflammations1", "acute_inflammations2", # F1 = 1
mix_binary_l10 <- c("caesarian", "mini_mammographic_masses", "primary_tumor")
mix_binary_m10 <- c("ionosphere", "mini_adult", "mini_travel_insurance", "statlog")
mix_multiclass <- c("mini_abalone","flags", "teaching_assistant", "contraceptive")
mix_binary <- c(mix_binary_l10, mix_binary_m10)
mix <- c(mix_binary, mix_multiclass)
mix
compare_manhattan_euclidean <- function(name) {
obj <- get(paste0("fit_", name, "r"))
vals <- predict(dummyVars(~.,obj), obj)
dm <- as.vector(as.matrix(dist(vals, method = "manhattan")))
de <- as.vector(as.matrix(dist(vals, method = "euclidean")))
p <- qplot(dm, de)
return(p)
}
meplots <- lapply(mix, compare_manhattan_euclidean)
compare_manhattan_euclidean <- function(name) {
obj <- get(paste0("fit_", name, "_r"))
vals <- predict(dummyVars(~.,obj), obj)
dm <- as.vector(as.matrix(dist(vals, method = "manhattan")))
de <- as.vector(as.matrix(dist(vals, method = "euclidean")))
p <- qplot(dm, de)
return(p)
}
meplots <- lapply(mix, compare_manhattan_euclidean)
compare_manhattan_euclidean <- function(name) {
#obj <- get(paste0("fit_", name, "_r"))
obj <- get(name)
vals <- predict(dummyVars(~.,obj), obj)
dm <- as.vector(as.matrix(dist(vals, method = "manhattan")))
de <- as.vector(as.matrix(dist(vals, method = "euclidean")))
p <- qplot(dm, de)
return(p)
}
meplots <- lapply(mix, compare_manhattan_euclidean)
ionosphere <- Ionosphere
meplots <- lapply(mix, compare_manhattan_euclidean)
figure <- ggarrange(plotlist = meplots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
meplots <- lapply(mix, compare_manhattan_euclidean)
figure <- ggarrange(plotlist = meplots, common.legend = TRUE,
ncol = 3, nrow = 4)
figure
mix
head(contraceptive)
head(mini_contraceptive)
table(head(mini_contraceptive$contraceptive))
table(mini_contraceptive$contraceptive)
sapply(contraceptive, unique)
contraceptive <- as.data.frame(contraceptive)
set.seed(123)
mini_contraceptive <- createDataPartition(contraceptive$contraceptive, p = 0.25, list = FALSE)
mini_contraceptive <- contraceptive[mini_contraceptive,]
set.seed(123)
fit_contraceptive_d <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
set.seed(123)
fit_contraceptive_r <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
fit_contraceptive_d
source('~/Desktop/Github/knnrr/methods/dknn/dknn_train.R')
sink("contraceptive")
set.seed(123)
fit_contraceptive_d <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
sink()
source('~/Desktop/Github/knnrr/methods/dknn/dknn_train.R')
sink("contraceptive")
set.seed(123)
fit_contraceptive_d <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
sink()
source('~/Desktop/Github/knnrr/methods/rknn/knn4.R')
sink("contraceptive")
set.seed(123)
fit_contraceptive_d <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
sink()
source('~/Desktop/Github/knnrr/methods/rknn/knn4.R')
sink("contraceptive")
set.seed(123)
fit_contraceptive_d <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
sink()
sink("contraceptive", append = TRUE)
predict(preProcess(contraceptive, c("center", "scale")), contraceptive)
obj <- predict(preProcess(contraceptive, c("center", "scale")), contraceptive)
predict(dummyVars(~.,obj), obj)
predict(preProcess(mini_contraceptive, c("center", "scale")), mini_contraceptive)
obj <- predict(preProcess(mini_contraceptive, c("center", "scale")), mini_contraceptive)
predict(dummyVars(~.,obj), obj)
source('~/Desktop/Github/knnrr/methods/dknn/dknn_train.R')
sink("contraceptive")
set.seed(123)
fit_contraceptive_d <- train(
x =  mini_contraceptive[, -10],
y = mini_contraceptive[, 10],
data = mini_contraceptive,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
sink()
data("Ionosphere")
ionosphere <- Ionosphere
ionosphere$V2 <- NULL
set.seed(123)
fit_ionosphere_d <- train(x =  ionosphere[,-34],
y = ionosphere[,34],
data = ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
sink("caesarean")
set.seed(123)
fit_caesarian_d <- train(
x =  caesarian[, -6],
y = caesarian[, 6],
data = caesarian,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
sink()
sink()
sink()
data("Ionosphere")
ionosphere <- Ionosphere
ionosphere$V2 <- NULL
sink("ionosphere")
set.seed(123)
fit_ionosphere_d <- train(x =  ionosphere[,-34],
y = ionosphere[,34],
data = ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
sink()
fit_ionosphere_d
nrow(ionosphere)
head(ionosphere[c(1,3),])
head(ionosphere[c(1,2),])
ionosphere[1,] - ionosphere[3,]
ionosphere[1,-1] - ionosphere[3,-1]
abs(ionosphere[1,-1] - ionosphere[3,-1])
abs(ionosphere[1,-c(1,33)] - ionosphere[3,-c(1,33)])
abs(ionosphere[1,-c(1,33)] - ionosphere[3,-c(1,33)])
ionosphere[1,]
ionosphere[1, -33]
abs(ionosphere[1,-c(1,34)] - ionosphere[3,-c(1,34)])
sum(abs(ionosphere[1,-c(1,34)] - ionosphere[3,-c(1,34)]))
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
sink("ionosphere")
set.seed(123)
fit_ionosphere_d <- train(x =  ionosphere[,-34],
y = ionosphere[,34],
data = ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
sink()
micro_ionosphere <- ionosphere[1:10, 1:5]
sink("ionosphere")
set.seed(123)
train(
x =  ionosphere[, -34],
y = ionosphere[, 34],
data = ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
head(ionosphere)
sink()
sink()
head(ionosphere)
micro_ionosphere <- ionosphere[1:10, c(1:5, 34)]
sink("ionosphere")
set.seed(123)
train(
x =  micro_ionosphere[, -34],
y = micro_ionosphere[, 34],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
micro_ionosphere <- ionosphere[1:10, c(1:5, 34)]
sink("ionosphere")
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
sink()
micro_ionosphere <- ionosphere[1:10, c(1:5, 34)]
ios <-  expand.grid(k = c(1,2,3),
distance = get_distances("mixed"),
ties = c("randomly"),
verbose = FALSE,
developer = FALSE)
sink("ionosphere")
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix
)
sink()
micro_ionosphere <- ionosphere[1:10, c(1:5, 34)]
ios <-  expand.grid(k = c(1,2,3),
distance = get_distances("mixed"),
ties = c("randomly"),
verbose = FALSE,
developer = FALSE)
sink("ionosphere")
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = ios
)
sink()
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = ios
)
sink()
sink()
sink()
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = ios
)
sink()
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = ios
)
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
set.seed(123)
train(
x =  micro_ionosphere[, -6],
y = micro_ionosphere[, 6],
data = micro_ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = ios
)
sink()
ncol(caesarian)
ncol(mini_mammographic_masses)
ncol(primary_tumor)
ncol(adult)
head(adult)
ncol(primary_tumor)
head(primary_tumor)
head(travel_insurance)
ncol(travel_insurance)
ncol(statlog)
head(statlog)
table(statlog$class)
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_m10.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
source('~/Desktop/Github/knnrr/methods/rknn/knn4.R')
source('~/Desktop/Github/knnrr/methods/dknn/dknn_train.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
sink()
sink()
sink()
source('~/Desktop/Github/knnrr/methods/rknn/knn4.R')
source('~/Desktop/Github/knnrr/methods/dknn/dknn_train.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
warnings()
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
fit_caesarian_d
library(mlbench)
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
warnings()
data("Ionosphere")
ionosphere <- Ionosphere
ionosphere$V2 <- NULL
head(ionosphere)
fit_ionosphere_d <- train(x =  ionosphere[,-34],
y = ionosphere[,34],
data = ionosphere,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
warnings()
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
ncol(ionosphere)
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
warnings()
source('~/Desktop/Github/knnrr/distances/custom_distances.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_l10.R')
fit_caesarian_d
fit_mini_mammographic_masses_d
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_m10.R')
source('~/Desktop/Github/knnrr/experiments/train/mixed/mixed_binary_m10.R')
source('~/Desktop/Github/knnrr/experiments/results/view_results.R')
warnings()
fit_mini_abalone_d
abalone <- as.data.frame(abalone)
set.seed(123)
mini_abalone <- createDataPartition(abalone$rings, p = 0.05, list = FALSE)
mini_abalone <- abalone[mini_abalone,]
set.seed(123)
fit_mini_abalone_d <- train(
x =  mini_abalone[, -9],
y = mini_abalone[, 9],
data = mini_abalone,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_mix
)
set.seed(123)
fit_mini_abalone_r <- train(
x =  mini_abalone[, -9],
y = mini_abalone[, 9],
data = mini_abalone,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix
)
fit_mini_abalone_d
num_binary_l10 <- c("mini_bank_note", "cpu", "haberman", "mini_skin", "vertebral_column2", "mini_weight_height")
num_binary_m10 <- c("mini_egg_eye_state", "ionospheren", "sonar")
num_multiclass_l10 <-c("filtered_ecoli", "glass", "iris", "life_expectancy", "seeds", "vertebral_column3", "wifi_localization", "mini_yeast")
num_multiclass_m10 <- c("mini_waves")
num_binary <- c(num_binary_l10, num_binary_m10)
num_multiclass <- c(num_multiclass_l10, num_multiclass_m10)
num <- c(num_binary, num_multiclass)
# ------ Binary
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots_num_binary, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
# ------ Multiclass
all_plots_num_multiclass <- lapply(num_multiclass, append_plot, metric = "Mean_F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots_num_multiclass, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
# ------ Binary
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots_num_binary, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
