geom_point(alpha = 0.3) +
geom_line()
??dist.binary
ds <- tribble(~iter, ~s1, ~s2, ~s3, ~s4, ~s5, ~s6, ~s7, ~s8, ~s9, ~s10)
for(i in 1:10000) {
vs <- data.frame(replicate(10,sample(0:1,2,rep=TRUE)))
s1 <- dist.binary(vs, method = 1)[1]
s2 <- dist.binary(vs, method = 2)[1]
s3 <- dist.binary(vs, method = 3)[1]
s4 <- dist.binary(vs, method = 4)[1]
s5 <- dist.binary(vs, method = 5)[1]
s6 <- dist.binary(vs, method = 6)[1]
s7 <- dist.binary(vs, method = 7)[1]
s8 <- dist.binary(vs, method = 8)[1]
s9 <- dist.binary(vs, method = 9)[1]
s10 <- dist.binary(vs, method = 10)[1]
ds <- bind_rows(ds, tibble(iter = i, s1 = s1, s2 = s2, s3 = s3, s4 = s4,
s5 = s5, s6 = s6, s7 = s7, s8 = s8, s9 = s9, s10 = s10))
}
ggplot(ds, aes(manhattan, euclidean)) +
geom_point(alpha = 0.3) +
geom_line()
ds <- tribble(~iter, ~manhattan, ~euclidean)
for(i in 1:1000) {
vs <- data.frame(replicate(10,sample(0:1,2,rep=TRUE)))
vs[sapply(vs, is.numeric)] <- lapply(vs[sapply(vs, is.numeric)], factor, levels = 0:1)
manhattan <- nominal_distances_add(vs)[1]
euclidean <- nominal_distances_avg(vs)[1]
ds <- bind_rows(ds, tibble(iter = i, manhattan = manhattan, euclidean = euclidean))
}
ds <- tribble(~iter, ~s1, ~s2, ~s3, ~s4, ~s5, ~s6, ~s7, ~s8, ~s9, ~s10)
for(i in 1:10000) {
vs <- data.frame(replicate(10,sample(0:1,2,rep=TRUE))) # binary pairs of vectors not dummy
s1 <- dist.binary(vs, method = 1)[1]
s2 <- dist.binary(vs, method = 2)[1]
s3 <- dist.binary(vs, method = 3)[1]
s4 <- dist.binary(vs, method = 4)[1]
s5 <- dist.binary(vs, method = 5)[1]
s6 <- dist.binary(vs, method = 6)[1]
s7 <- dist.binary(vs, method = 7)[1]
s8 <- dist.binary(vs, method = 8)[1]
s9 <- dist.binary(vs, method = 9)[1]
s10 <- dist.binary(vs, method = 10)[1]
ds <- bind_rows(ds, tibble(iter = i, s1 = s1, s2 = s2, s3 = s3, s4 = s4,
s5 = s5, s6 = s6, s7 = s7, s8 = s8, s9 = s9, s10 = s10))
}
ggpairs(ds[,-1], upper = "blank", diag = "blank", switch = "both")  # GGally package
# treats the variable as three dummy variables A1 A2 B1 B2 B3 B4 C1 C2 C3
x <- function(x) {
x[c(sample(1:2, 1), sample(3:6, 1), sample(7:9, 1))] <- 1
return(x)
}
ds <- tribble(~iter, ~s1, ~s2, ~s3, ~s4, ~s5, ~s6, ~s7, ~s8, ~s9, ~s10, ~cosine)
for(i in 1:1000) {
m <- matrix(0, nrow = 2, ncol = 9) # two rows of 0s
vs <- as.data.frame(t(apply(m, 1, x))) # one 1 in each for A, another for B, one more for C
s1 <- dist.binary(vs, method = 1)[1]
s2 <- dist.binary(vs, method = 2)[1]
s3 <- dist.binary(vs, method = 3)[1]
s4 <- dist.binary(vs, method = 4)[1]
s5 <- dist.binary(vs, method = 5)[1]
s6 <- dist.binary(vs, method = 6)[1]
s7 <- dist.binary(vs, method = 7)[1]
s8 <- dist.binary(vs, method = 8)[1]
s9 <- dist.binary(vs, method = 9)[1]
s10 <- dist.binary(vs, method = 10)[1]
ds <- bind_rows(ds, tibble(iter = i, s1 = s1, s2 = s2, s3 = s3, s4 = s4,
s5 = s5, s6 = s6, s7 = s7, s8 = s8, s9 = s9, s10 = s10))
}
ggpairs(ds[,-1], upper = "blank", diag = "blank", switch = "both")  # GGally package
ds <- tribble(~iter, ~manhattan, ~euclidean, ~p3, ~p4, ~chebyshev, ~binary)
for(i in 1:10000) {
vs <- data.frame(replicate(10,sample(0:1,2,rep=TRUE))) # binary pairs of vectors
manhattan <- dist(vs, method = "manhattan")[1]
euclidean <- dist(vs, method = "euclidean")[1]
p3 <- dist(vs, method = "minkowski", p = 3)[1]
p4 <- dist(vs, method = "minkowski", p = 4)[1]
chebyshev <- dist(vs, method = "maximum")[1]
binary <- dist(vs, method = "binary")[1]
ds <- bind_rows(ds, tibble(iter = i, p3 = p3, p4 = p4,
manhattan = manhattan, euclidean = euclidean,
chebyshev = chebyshev, binary = binary))
}
library(ade4) #dist.binary
library(GGally) # ggpairs
library(tidyverse)
ds <- tribble(~iter, ~manhattan, ~euclidean, ~p3, ~p4, ~chebyshev, ~binary)
for(i in 1:10000) {
vs <- data.frame(replicate(10,sample(0:1,2,rep=TRUE))) # binary pairs of vectors
manhattan <- dist(vs, method = "manhattan")[1]
euclidean <- dist(vs, method = "euclidean")[1]
p3 <- dist(vs, method = "minkowski", p = 3)[1]
p4 <- dist(vs, method = "minkowski", p = 4)[1]
chebyshev <- dist(vs, method = "maximum")[1]
binary <- dist(vs, method = "binary")[1]
ds <- bind_rows(ds, tibble(iter = i, p3 = p3, p4 = p4,
manhattan = manhattan, euclidean = euclidean,
chebyshev = chebyshev, binary = binary))
}
# Behavior of the distances in the native method dist
ggpairs(ds[,-1], upper = "blank", diag = "blank", switch = "both")  # GGally package
?dist.binary
?dist
ds <- tribble(~iter, ~s1, ~s2, ~s3, ~s4, ~s5, ~s6, ~s7, ~s8, ~s9, ~s10)
for(i in 1:10000) {
vs <- data.frame(replicate(10,sample(0:1,2,rep=TRUE))) # binary pairs of vectors not dummy
s1 <- dist.binary(vs, method = 1)[1]
s2 <- dist.binary(vs, method = 2)[1]
s3 <- dist.binary(vs, method = 3)[1]
s4 <- dist.binary(vs, method = 4)[1]
s5 <- dist.binary(vs, method = 5)[1]
s6 <- dist.binary(vs, method = 6)[1]
s7 <- dist.binary(vs, method = 7)[1]
s8 <- dist.binary(vs, method = 8)[1]
s9 <- dist.binary(vs, method = 9)[1]
s10 <- dist.binary(vs, method = 10)[1]
ds <- bind_rows(ds, tibble(iter = i, s1 = s1, s2 = s2, s3 = s3, s4 = s4,
s5 = s5, s6 = s6, s7 = s7, s8 = s8, s9 = s9, s10 = s10))
}
ggpairs(ds[,-1], upper = "blank", diag = "blank", switch = "both")  # GGally package
# treats the variable as three dummy variables A1 A2 B1 B2 B3 B4 C1 C2 C3
x <- function(x) {
x[c(sample(1:2, 1), sample(3:6, 1), sample(7:9, 1))] <- 1
return(x)
}
ds <- tribble(~iter, ~s1, ~s2, ~s3, ~s4, ~s5, ~s6, ~s7, ~s8, ~s9, ~s10)
for(i in 1:1000) {
m <- matrix(0, nrow = 2, ncol = 9) # two rows of 0s
vs <- as.data.frame(t(apply(m, 1, x))) # one 1 in each for A, another for B, one more for C
s1 <- dist.binary(vs, method = 1)[1]
s2 <- dist.binary(vs, method = 2)[1]
s3 <- dist.binary(vs, method = 3)[1]
s4 <- dist.binary(vs, method = 4)[1]
s5 <- dist.binary(vs, method = 5)[1]
s6 <- dist.binary(vs, method = 6)[1]
s7 <- dist.binary(vs, method = 7)[1]
s8 <- dist.binary(vs, method = 8)[1]
s9 <- dist.binary(vs, method = 9)[1]
s10 <- dist.binary(vs, method = 10)[1]
ds <- bind_rows(ds, tibble(iter = i, s1 = s1, s2 = s2, s3 = s3, s4 = s4,
s5 = s5, s6 = s6, s7 = s7, s8 = s8, s9 = s9, s10 = s10))
}
ggpairs(ds[,-1], upper = "blank", diag = "blank", switch = "both")  # GGally package
x <- function(x) {
x[c(sample(1:2, 1), sample(3:6, 1), sample(7:9, 1))] <- 1
return(x)
}
aggdb <- function(m) {
return(mean(c(dist.binary(vs[,1:2], method = m)[1],
dist.binary(vs[,3:6], method = m)[1],
dist.binary(vs[,7:9], method = m)[1])))
}
ds <- tribble(~iter, ~s1, ~s2, ~s3, ~s4, ~s5, ~s6, ~s7, ~s8, ~s9, ~s10)
for(i in 1:10000) {
m <- matrix(0, nrow = 2, ncol = 9)
vs <- as.data.frame(t(apply(m, 1, x)))
s1 <- aggdb(1)
s2 <- aggdb(2)
s3 <- aggdb(3)
s4 <- aggdb(4)
s5 <- aggdb(5)
s6 <- aggdb(6)
s7 <- aggdb(7)
s8 <- aggdb(8)
s9 <- aggdb(9)
s10 <- aggdb(10)
ds <- bind_rows(ds, tibble(iter = i, s1 = s1, s2 = s2, s3 = s3, s4 = s4,
s5 = s5, s6 = s6, s7 = s7, s8 = s8, s9 = s9, s10 = s10))
}
ggpairs(ds[,-1], upper = "blank", diag = "blank", switch = "both")
ncol(mini_bank_note)
ncol(haberman)
ncol(mini_skin)
ncol(filtered_ecoli)
ncol(life_expectancy)
ncol(seeds)
ncol(vertebral_colum3)
ncol(wifi_localization)
ncol(mini_yeast)
ncol(acute_inflammations1)
ncol(caesarian)
head(caesarian)
ncol(mini_mammographic_masses)
ncol(statlog)
ncol(abalone)
ncol(teaching_assistant)
ncol(contraceptive)
ncol(Ionosphere)
head(Ionosphere)
library(mlbench)
data("Sonar")
ncol(sonar)
head(sonar)
nrow(Ionosphere)
nrow(sonar)
sapply(sonar, unique)
unique(sonar$V1)
unique(sonar$V2)
data("sonar")
head(sonar)
sonar <- as.data.frame(sonar)
set.seed(123)
fit_ionosphere_d <- train(x =  sonar[,-61],
y = sonar[,61],
data = sonar,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
library(caret)
set.seed(123)
fit_ionosphere_d <- train(x =  sonar[,-61],
y = sonar[,61],
data = sonar,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
library(ade4)
library(arules)
library(caret)
library(cluster)
library(devtools)
library(foreign)
library(GGally)
library(ggplot2)
library(ggpubr)
library(nnet)
library(parallel)
library(tidyverse)
library(usedist)
sonar <- as.data.frame(sonar)
set.seed(123)
fit_ionosphere_d <- train(x =  sonar[,-61],
y = sonar[,61],
data = sonar,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
set.seed(123)
fit_ionosphere_r <- train(x =  sonar[,-61],
y = sonar[,61],
data = sonar,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix)
warnings()
library(consensus)
source('~/Desktop/Github/knnrr/experiments/train/numerical/numerical_binary_m10.R', echo=TRUE)
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2")
num_binary_m10 <- c("ionosphere", "sonar")
num_binary <- c(num_binary_l10, num_binary_m10)
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
all_plots <- all_plots_num_binary
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 3)
figure
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 4)
figure
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
read.arff("data/other/cpu.arff")
read.arff("data/other/cpu.arff.txt")
cpu <- read.arff("data/other/cpu.arff.txt")
head(cpu)
complete.cases(cpu)
sapply(cpu, class)
sapply(cpu, unique)
plot_dist_cols(cpu)
?plot_gris
??plot_gris
??plot_grid
library(cowplot)
plot_dist_cols(cpu)
discretize(cpu$class, braks = 2)
discretize(cpu$class, breaks = 2)
table(discretize(cpu$class, breaks = 2))
ncol(cpu)
ncol(cpu)
head(cpu)
cpu <- read.arff("data/other/cpu.arff.txt")
cpu$class <- (discretize(cpu$class, breaks = 2))
set.seed(123)
fit_cpu_d <- train(x =  cpu[,-7],
y = cpu[,7],
data = cpu,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
set.seed(123)
fit_cpu_r <- train(x =  cpu[,-7],
y = cpu[,7],
data = cpu,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_num)
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("ionosphere", "sonar")
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
all_plots <- all_plots_num_binary
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("ionosphere", "sonar")
num_multiclass_l10 <-c("filtered_ecoli", "iris", "life_expectancy", "seeds", "vertebral_column3", "wifi_localization", "mini_yeast")
num_multiclass_m10 <- ""
num_binary <- c(num_binary_l10, num_binary_m10)
num_multiclass <- c(num_multiclass_l10)
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
all_plots <- all_plots_num_binary
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
egg_eye_state <- read.arff("data/other/eeg_eye_state")
head(eeg_eye_state)
})
head(eeg_eye_state)
head(egg_eye_state)
ncol(egg_eye_state)
nrow(egg_eye_state)
sapply(egg_eye_style, class)
sapply(egg_eye_state, class)
ncol(mini_egg_eye_state)
set.seed(123)
mini_egg_eye_state <- createDataPartition(egg_eye_state$eyeDetection, p = 0.01, list = FALSE)
mini_egg_eye_state <- egg_eye_state[mini_egg_eye_state, ]
fit_mini_egg_eye_state_d <- train(x =  mini_egg_eye_state[,-61],
y = mini_egg_eye_state[,61],
data = mini_egg_eye_state,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
ncol(mini_egg_eye_state)
table(mini_egg_eye_state$eyeDetection)
nrow(mini_egg_eye_state)
set.seed(123)
mini_egg_eye_state <- createDataPartition(egg_eye_state$eyeDetection, p = 0.01, list = FALSE)
mini_egg_eye_state <- egg_eye_state[mini_egg_eye_state, ]
fit_mini_egg_eye_state_d <- train(x =  mini_egg_eye_state[,-15],
y = mini_egg_eye_state[,15],
data = mini_egg_eye_state,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_mix)
set.seed(123)
fit_mini_egg_eye_state_r <- train(x =  mini_egg_eye_state[,-61],
y = mini_egg_eye_state[,61],
data = mini_egg_eye_state,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix)
head(mini_egg_eye_state)
set.seed(123)
fit_mini_egg_eye_state_r <- train(x =  mini_egg_eye_state[,-15],
y = mini_egg_eye_state[,15],
data = mini_egg_eye_state,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_mix)
fit_mini_egg_eye_state_r
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("mini_egg_eye_state", "ionosphere", "sonar")
# "acute_inflammations1", "acute_inflammations2", # F1 = 1
mix_binary_l10 <- c("caesarian", "mini_mammographic_masses", "primary_tumor")
mix_binary <- c(mix_binary_l10, mix_binary_m10)
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
all_plots_num_multiclass <- lapply(num_multiclass, append_plot, metric = "Mean_F1", input = "numerical")
all_plots <- all_plots_num_binary
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("mini_egg_eye_state", "ionosphere", "sonar")
num_binary <- c(num_binary_l10, num_binary_m10)
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
all_plots <- all_plots_num_binary
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
glass <- read.arff("data/other/glass.arff.txt")
head(glass)
complete.cases(glass)
ncol(glass)
head(glass)
set.seed(123)
fit_glass_d <- train(
x =  glass[, -10],
y = glass[, 10],
data = glass,
method = dknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = dgrid_num
)
set.seed(123)
fit_glass_r <- train(
x =  glass[, -10],
y = glass[, 10],
data = glass,
method = rknn,
preProcess = c("center", "scale"),
trControl = multi_fitControl,
tuneGrid = rgrid_num
)
num_multiclass_l10 <-c("filtered_ecoli", "glass", "iris", "life_expectancy", "seeds", "vertebral_column3", "wifi_localization", "mini_yeast")
num_multiclass_m10 <- ""
num_binary <- c(num_binary_l10, num_binary_m10)
num_multiclass <- c(num_multiclass_l10)
all_plots_num_multiclass <- lapply(num_multiclass, append_plot, metric = "Mean_F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
append_plot_ties <- function(name) {
paramd <- get(paste0("fit_", name, "_d"))
p <- compare_ties(paramd$results, metric = "Kappa", name = name)
return(p)
}
all_data <- c(
num_binary, num_multiclass,
mix_binary, mix_multiclass,
cat_binary, cat_multiclass
)
all_plots <- lapply(all_data, append_plot_ties)
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("mini_egg_eye_state", "ionosphere", "sonar")
all_plots <- lapply(num_binary, append_plot_ties)
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
head(haberman)
head(cpu)
sapply(cpu, unique)
append_plot_ties <- function(name) {
paramd <- get(paste0("fit_", name, "_d"))
p <- compare_ties(paramd$results, metric = "Kappa", name = name)
return(p)
}
all_plots <- lapply(num_multiclass, append_plot_ties)
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
cat_binary <- c("balance_scale", "breast_cancer", "lenses", "mini_cars", "somerville", "mini_tic_tac_toe")#, "mini_chess")
cat_multiclass <- c("post_operative", "mini_connect4","soybean_large", "zoo")
all_plots <- lapply(cat_binary, append_plot_ties)
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
?dist.binary
m <- matrix(0, nrow = 2, ncol = 9)
vs <- as.data.frame(t(apply(m, 1, x)))
vs
?dist.binary
source('~/Desktop/Github/knnrr/compare_ties.R', echo=TRUE)
append_plot_ties <- function(name) {
paramd <- get(paste0("fit_", name, "_d"))
p <- compare_ties(paramd$results, metric = "Kappa", name = name)
return(p)
}
all_plots <- lapply(num_binary, append_plot_ties)
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
figure
source('~/Desktop/Github/knnrr/experiments/results/view_results.R', echo=TRUE)
source('~/Desktop/Github/knnrr/experiments/results/view_results.R', echo=TRUE)
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("mini_egg_eye_state", "ionosphere", "sonar")
num_binary <- c(num_binary_l10, num_binary_m10)
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
warnings()
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
figure
num_binary_l10 <- c("mini_bank_note","haberman","mini_skin", "mini_weight_height", "vertebral_column2", "cpu")
num_binary_m10 <- c("mini_egg_eye_state", "ionosphere", "sonar")
num_binary <- c(num_binary_l10, num_binary_m10)
all_plots_num_binary <- lapply(num_binary, append_plot, metric = "F1", input = "numerical")
library(ade4)
library(arules)
library(caret)
library(cluster)
library(devtools)
library(foreign)
library(GGally)
library(ggplot2)
library(ggpubr)
library(nnet)
library(parallel)
library(tidyverse)
library(usedist)
# install_github("noeliarico/consensus",
#                subdir = "consensus",
#                force = TRUE)
library(consensus)
all_plots <- all_plots_num_binary
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
