n
n[!n %in% grep(paste0("Mean_", collapse = "|"), n, value = T)]
grep("Mean_", n)
library(stringr)
str_remove("Mean_", r)
str_remove("Mean_", n)
n
n <- paste0("Mean_", colnames(rdata))
str_remove(n, "Mean_")
n
n <- str_remove(n, "Mean_")
str_remove(n, "Mean_")
compare_metric <- function(rdata, ddata, metric, name = "",
input = "numerical", breakties = "randomly", filter = "",
fix_axis = FALSE, min = 0, max = 1,
problem = "binary") { #, low_limit = 1) {
colnames(rdata) <- str_remove(rdata, "Mean_")
colnames(ddata) <- str_remove(ddata, "Mean_")
# colors <- c(
# "#9e6fb8",
# "#45b5aa",
# "#ff6f61",
# "#88b04b",
# "#d94f70",
# "#db9e23",
# "#5f4b8b",
# "#0e1111",
# "#381452",
# "#004000",
# "#a85a72",
# "#750c41",
# "#232b2b",
# "#3b444b",
#
# "#00294f",
# "#80bab0")
colors <-  c("#e6beff", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b",
"#42d4f4", "#4363d8", "#911eb4")
rdata <- rdata$results
ddata <- ddata$results
rdata <- rdata %>%
filter(ties == breakties) %>%
select(k, rr, {{metric}}) %>%
mutate(method = rr,
rr = NULL,
type = "rr")
ddata <- ddata %>%
filter(ties == breakties) %>%
#filter({{metric}} >= low_limit) %>%
select(k, distance, {{metric}}) %>%
mutate(method = distance,
distance = NULL,
type = "distance")
if(filter != "") {
ddata <- data %>% file(rr = filter)
}
all_data <- bind_rows(rdata, ddata) %>%
filter(k < 9) %>%
mutate(k = as.factor(k),
method = factor(method))
if (input == "numerical") {
all_data <- all_data %>%
mutate(method = fct_recode(method, #minkowski_p3 = "3", minkowski_p4 = "4",
t2_approval = "two", t3_approval = "three",
t5_approval = "five",  t7_approval = "seven"))
all_data <- all_data %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "chebyshev"))
#, "minkowski_p3", "minkowski_p4"))
}
else if (input == "mixed") {
all_data <- all_data %>%
mutate(method = fct_recode(method,
t2_approval = "two", t3_approval = "three",
t5_approval = "five",  t7_approval = "seven"))
all_data <- all_data %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "gower"))
}
head(all_data)
p <- ggplot(all_data, aes_string(x = "type", y = metric)) +
geom_point(
aes(color = method, shape = method),
size = 4,
alpha = 0.90,
position = position_jitter(w = 0.1, h = 0)
) +
#scale_alpha_discrete(range = c(0.6)) +
facet_grid(~k) +
#scale_shape_manual(values = c(15:19, 5:10)) +
scale_shape_manual(values = c(16, 2:15)) +
#  scale_color_brewer(palette="Set1") +
scale_color_manual(values = colors) +
ggtitle(name) +
theme_light() +
#scale_y_continuous(limits = c(0.5,1), breaks = seq(0.5,1,0.05)) +
guides(shape = guide_legend(ncol = 6, byrow = TRUE),
col = guide_legend(ncol = 6, byrow = TRUE))
if(fix_axis) {
p <- p + scale_y_continuous(limits = c(min,max), breaks = seq(min,max,0.05))
}
return(p)
}
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "F1", input = "numerical")
compare_metric <- function(rdata, ddata, metric, name = "",
input = "numerical", breakties = "randomly", filter = "",
fix_axis = FALSE, min = 0, max = 1,
problem = "binary") { #, low_limit = 1) {
# colors <- c(
# "#9e6fb8",
# "#45b5aa",
# "#ff6f61",
# "#88b04b",
# "#d94f70",
# "#db9e23",
# "#5f4b8b",
# "#0e1111",
# "#381452",
# "#004000",
# "#a85a72",
# "#750c41",
# "#232b2b",
# "#3b444b",
#
# "#00294f",
# "#80bab0")
colors <-  c("#e6beff", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b",
"#42d4f4", "#4363d8", "#911eb4")
rdata <- rdata$results
ddata <- ddata$results
colnames(rdata) <- str_remove(rdata, "Mean_")
colnames(ddata) <- str_remove(ddata, "Mean_")
rdata <- rdata %>%
filter(ties == breakties) %>%
select(k, rr, {{metric}}) %>%
mutate(method = rr,
rr = NULL,
type = "rr")
ddata <- ddata %>%
filter(ties == breakties) %>%
#filter({{metric}} >= low_limit) %>%
select(k, distance, {{metric}}) %>%
mutate(method = distance,
distance = NULL,
type = "distance")
if(filter != "") {
ddata <- data %>% file(rr = filter)
}
all_data <- bind_rows(rdata, ddata) %>%
filter(k < 9) %>%
mutate(k = as.factor(k),
method = factor(method))
if (input == "numerical") {
all_data <- all_data %>%
mutate(method = fct_recode(method, #minkowski_p3 = "3", minkowski_p4 = "4",
t2_approval = "two", t3_approval = "three",
t5_approval = "five",  t7_approval = "seven"))
all_data <- all_data %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "chebyshev"))
#, "minkowski_p3", "minkowski_p4"))
}
else if (input == "mixed") {
all_data <- all_data %>%
mutate(method = fct_recode(method,
t2_approval = "two", t3_approval = "three",
t5_approval = "five",  t7_approval = "seven"))
all_data <- all_data %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "gower"))
}
head(all_data)
p <- ggplot(all_data, aes_string(x = "type", y = metric)) +
geom_point(
aes(color = method, shape = method),
size = 4,
alpha = 0.90,
position = position_jitter(w = 0.1, h = 0)
) +
#scale_alpha_discrete(range = c(0.6)) +
facet_grid(~k) +
#scale_shape_manual(values = c(15:19, 5:10)) +
scale_shape_manual(values = c(16, 2:15)) +
#  scale_color_brewer(palette="Set1") +
scale_color_manual(values = colors) +
ggtitle(name) +
theme_light() +
#scale_y_continuous(limits = c(0.5,1), breaks = seq(0.5,1,0.05)) +
guides(shape = guide_legend(ncol = 6, byrow = TRUE),
col = guide_legend(ncol = 6, byrow = TRUE))
if(fix_axis) {
p <- p + scale_y_continuous(limits = c(min,max), breaks = seq(min,max,0.05))
}
return(p)
}
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "F1", input = "numerical")
compare_metric <- function(rdata, ddata, metric, name = "",
input = "numerical", breakties = "randomly", filter = "",
fix_axis = FALSE, min = 0, max = 1,
problem = "binary") { #, low_limit = 1) {
# colors <- c(
# "#9e6fb8",
# "#45b5aa",
# "#ff6f61",
# "#88b04b",
# "#d94f70",
# "#db9e23",
# "#5f4b8b",
# "#0e1111",
# "#381452",
# "#004000",
# "#a85a72",
# "#750c41",
# "#232b2b",
# "#3b444b",
#
# "#00294f",
# "#80bab0")
colors <-  c("#e6beff", "#e6194B", "#f58231", "#ffe119", "#bfef45", "#3cb44b",
"#42d4f4", "#4363d8", "#911eb4")
rdata <- rdata$results
ddata <- ddata$results
colnames(rdata) <- str_remove(colnames(rdata), "Mean_")
colnames(ddata) <- str_remove(colnames(ddata), "Mean_")
rdata <- rdata %>%
filter(ties == breakties) %>%
select(k, rr, {{metric}}) %>%
mutate(method = rr,
rr = NULL,
type = "rr")
ddata <- ddata %>%
filter(ties == breakties) %>%
#filter({{metric}} >= low_limit) %>%
select(k, distance, {{metric}}) %>%
mutate(method = distance,
distance = NULL,
type = "distance")
if(filter != "") {
ddata <- data %>% file(rr = filter)
}
all_data <- bind_rows(rdata, ddata) %>%
filter(k < 9) %>%
mutate(k = as.factor(k),
method = factor(method))
if (input == "numerical") {
all_data <- all_data %>%
mutate(method = fct_recode(method, #minkowski_p3 = "3", minkowski_p4 = "4",
t2_approval = "two", t3_approval = "three",
t5_approval = "five",  t7_approval = "seven"))
all_data <- all_data %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "chebyshev"))
#, "minkowski_p3", "minkowski_p4"))
}
else if (input == "mixed") {
all_data <- all_data %>%
mutate(method = fct_recode(method,
t2_approval = "two", t3_approval = "three",
t5_approval = "five",  t7_approval = "seven"))
all_data <- all_data %>%
mutate(method = fct_relevel(method, "borda_count", "plurality", "t2_approval",
"t3_approval", "t5_approval", "t7_approval",
"manhattan", "euclidean", "gower"))
}
head(all_data)
p <- ggplot(all_data, aes_string(x = "type", y = metric)) +
geom_point(
aes(color = method, shape = method),
size = 4,
alpha = 0.90,
position = position_jitter(w = 0.1, h = 0)
) +
#scale_alpha_discrete(range = c(0.6)) +
facet_grid(~k) +
#scale_shape_manual(values = c(15:19, 5:10)) +
scale_shape_manual(values = c(16, 2:15)) +
#  scale_color_brewer(palette="Set1") +
scale_color_manual(values = colors) +
ggtitle(name) +
theme_light() +
#scale_y_continuous(limits = c(0.5,1), breaks = seq(0.5,1,0.05)) +
guides(shape = guide_legend(ncol = 6, byrow = TRUE),
col = guide_legend(ncol = 6, byrow = TRUE))
if(fix_axis) {
p <- p + scale_y_continuous(limits = c(min,max), breaks = seq(min,max,0.05))
}
return(p)
}
all_plots <- lapply(names_an_nn, append_plot, metric = "F1", input = "numerical")
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 1)
figure
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 2)
figure
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "Kappa", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 2)
figure
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 2)
figure
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "Pos_Predicted_Value", input = "numerical")
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "Pos_Pred_Value", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 2)
figure
names_an_nn <- sapply(names, paste0, "_an_nn5")
all_plots <- lapply(names_an_nn, append_plot, metric = "Neg_Pred_Value", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 2, nrow = 2)
figure
imb_yeast_0_3_5_9_vs_7_8 <- read.keel("data/keel/imbalance/ratio2/yeast-0-3-5-9_vs_7-8.dat")
change <- colnames(imb_yeast_0_3_5_9_vs_7_8)[colnames(imb_yeast_0_3_5_9_vs_7_8) != "class"]
imb_yeast_0_3_5_9_vs_7_8 <- imb_yeast_0_3_5_9_vs_7_8 %>% mutate_at(change, function(x) {as.numeric(as.character(x))})
set.seed(123)
fit_imb_yeast_0_3_5_9_vs_7_8_d <- train(x =  imb_yeast_0_3_5_9_vs_7_8[,-9],
y = imb_yeast_0_3_5_9_vs_7_8[,9],
data = imb_yeast_0_3_5_9_vs_7_8,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
set.seed(123)
fit_imb_yeast_0_3_5_9_vs_7_8_r <- train(x =  imb_yeast_0_3_5_9_vs_7_8[,-9],
y = imb_yeast_0_3_5_9_vs_7_8[,9],
data = imb_yeast_0_3_5_9_vs_7_8,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_num)
compare_metric(fit_imb_yeast_0_3_5_9_vs_7_8_r, fit_imb_yeast_0_3_5_9_vs_7_8_d, metric = "F1", input = "numerical")
nrow(imb_yeast_0_3_5_9_vs_7_8)
imb_yeast6 <- read.keel("data/keel/imbalance/ratio2/yeast6.dat")
change <- colnames(imb_yeast6)[colnames(imb_yeast6) != "Class"]
imb_yeast6 <- imb_yeast6 %>% mutate_at(change, function(x) {as.numeric(as.character(x))})
set.seed(123)
fit_imb_yeast6_d <- train(x =  imb_yeast6[,-9],
y = imb_yeast6[,9],
data = imb_yeast6,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
set.seed(123)
fit_imb_yeast6_r <- train(x =  imb_yeast6[,-9],
y = imb_yeast6[,9],
data = imb_yeast6,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_num)
compare_metric(fit_imb_yeast6_r, fit_imb_yeast6_d, metric = "Kappa", input = "numerical")
imb_ecoli_0_1_4_7_vs_2_3_5_6<- read.keel("data/keel/imbalance/ratio2/ecoli-0-1-4-7_vs_2-3-5-6.dat")
imb_ecoli_0_1_4_7_vs_2_3_5_6<- read.keel("data/keel/imbalance/ratio2/ecoli-0-1-4-7_vs_2-3-5-6.dat")
change <- colnames(imb_yeast6)[colnames(imb_yeast6) != "Class"]
imb_ecoli_0_1_4_7_vs_2_3_5_6<- imb_ecoli_0_1_4_7_vs_2_3_5_6%>% mutate_at(change, function(x) {as.numeric(as.character(x))})
imb_ecoli_0_1_4_7_vs_2_3_5_6<- read.keel("data/keel/imbalance/ratio2/ecoli-0-1-4-7_vs_2-3-5-6.dat")
change <- colnames(imb_yeast6)[colnames(imb_yeast6) != "Class"]
head(imb_ecoli_0_1_4_7_vs_2_3_5_6)
change <- colnames(imb_ecoli_0_1_4_7_vs_2_3_5_6)[colnames(imb_yeast6) != "class"]
imb_ecoli_0_1_4_7_vs_2_3_5_6<- imb_ecoli_0_1_4_7_vs_2_3_5_6%>% mutate_at(change, function(x) {as.numeric(as.character(x))})
imb_ecoli_0_1_4_7_vs_2_3_5_6<- read.keel("data/keel/imbalance/ratio2/ecoli-0-1-4-7_vs_2-3-5-6.dat")
change <- colnames(imb_ecoli_0_1_4_7_vs_2_3_5_6)[colnames(imb_ecoli_0_1_4_7_vs_2_3_5_6) != "class"]
imb_ecoli_0_1_4_7_vs_2_3_5_6<- imb_ecoli_0_1_4_7_vs_2_3_5_6 %>% mutate_at(change, function(x) {as.numeric(as.character(x))})
ncol(imb_ecoli_0_1_4_7_vs_2_3_5_6)
set.seed(123)
fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_d <- train(x =  imb_ecoli_0_1_4_7_vs_2_3_5_6[,-8],
y = imb_ecoli_0_1_4_7_vs_2_3_5_6[,8],
data = imb_ecoli_0_1_4_7_vs_2_3_5_6,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
set.seed(123)
fit_imb_yeast6_r <- train(x =  imb_ecoli_0_1_4_7_vs_2_3_5_6[,-8],
y = imb_ecoli_0_1_4_7_vs_2_3_5_6[,8],
data = imb_ecoli_0_1_4_7_vs_2_3_5_6,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_num)
imb_ecoli_0_1_4_7_vs_2_3_5_6<- read.keel("data/keel/imbalance/ratio2/ecoli-0-1-4-7_vs_2-3-5-6.dat")
change <- colnames(imb_ecoli_0_1_4_7_vs_2_3_5_6)[colnames(imb_ecoli_0_1_4_7_vs_2_3_5_6) != "class"]
imb_ecoli_0_1_4_7_vs_2_3_5_6<- imb_ecoli_0_1_4_7_vs_2_3_5_6 %>% mutate_at(change, function(x) {as.numeric(as.character(x))})
set.seed(123)
fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_d <- train(x =  imb_ecoli_0_1_4_7_vs_2_3_5_6[,-8],
y = imb_ecoli_0_1_4_7_vs_2_3_5_6[,8],
data = imb_ecoli_0_1_4_7_vs_2_3_5_6,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
set.seed(123)
fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_r <- train(x =  imb_ecoli_0_1_4_7_vs_2_3_5_6[,-8],
y = imb_ecoli_0_1_4_7_vs_2_3_5_6[,8],
data = imb_ecoli_0_1_4_7_vs_2_3_5_6,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_num)
compare_metric(fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_r, fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_d, metric = "Kappa", input = "numerical")
compare_metric(fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_r, fit_imb_ecoli_0_1_4_7_vs_2_3_5_6_d, metric = "F1", input = "numerical")
imb_ecoli_0_1_4_7_vs_5_6 <- read.keel("data/keel/imbalance/ratio2/ecoli-0-1-4-7_vs_5-6.dat")
change <- colnames(imb_ecoli_0_1_4_7_vs_5_6)[colnames(imb_ecoli_0_1_4_7_vs_5_6) != "class"]
imb_ecoli_0_1_4_7_vs_5_6 <- imb_ecoli_0_1_4_7_vs_5_6 %>% mutate_at(change, function(x) {as.numeric(as.character(x))})
set.seed(123)
fit_imb_ecoli_0_1_4_7_vs_5_6_d <- train(x =  imb_ecoli_0_1_4_7_vs_5_6[,-7],
y = imb_ecoli_0_1_4_7_vs_5_6[,7],
data = imb_ecoli_0_1_4_7_vs_5_6,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
set.seed(123)
fit_imb_ecoli_0_1_4_7_vs_5_6_r <- train(x =  imb_ecoli_0_1_4_7_vs_5_6[,-7],
y = imb_ecoli_0_1_4_7_vs_5_6[,7],
data = imb_ecoli_0_1_4_7_vs_5_6,
method = rknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = rgrid_num)
compare_metric(fit_imb_ecoli_0_1_4_7_vs_5_6_r, fit_imb_ecoli_0_1_4_7_vs_5_6_d, metric = "F1", input = "numerical")
tuneGrid = rgrid_num)nrow(imb_yeast)
nrow(imb_yeast)
nrow(imb_yeast6)
imb_yeast6 <- read.keel("data/keel/imbalance/ratio2/yeast6.dat")
change <- colnames(imb_yeast6)[colnames(imb_yeast6) != "Class"]
imb_yeast6 <- imb_yeast6 %>% mutate_at(change, function(x) {as.numeric(as.character(x))})
set.seed(123)
fit_imb_yeast6_d <- train(x =  imb_yeast6[,-9],
y = imb_yeast6[,9],
data = imb_yeast6,
method = dknn,
preProcess = c("center", "scale"),
trControl = binary_fitControl,
tuneGrid = dgrid_num)
# binary datasets: ratio >= 9
imbalance2 <- c("imb_glass2", "imb_glass4", "imb_glass5", "imb_ecoli4",
"ecoli_0_1_4_6_vs_5", "ecoli_0_1_4_7_vs_2_3_5_6",
"ecoli_0_6_7_vs_5", "imb_ecoli_0_1_4_7_vs_5_6")
# binary datasets: ratio >= 9
imbalance2 <- c("imb_glass2", "imb_glass4", "imb_glass5", "imb_ecoli4",
"ecoli_0_1_4_6_vs_5", "ecoli_0_1_4_7_vs_2_3_5_6",
"ecoli_0_6_7_vs_5", "imb_ecoli_0_1_4_7_vs_5_6",
"imb_yeast_0_3_5_9_vs_7_8") # "imb_yeast6",
all_plots <- lapply(imbalance2, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 2)
figure
fit_imb_ecoli_0_1_4_6_vs_5_r
# binary datasets: ratio >= 9
imbalance2 <- c("imb_glass2", "imb_glass4", "imb_glass5", "imb_ecoli4",
"imb_ecoli_0_1_4_6_vs_5", "imb_eecoli_0_1_4_7_vs_2_3_5_6",
"imb_eecoli_0_6_7_vs_5", "imb_ecoli_0_1_4_7_vs_5_6",
"imb_yeast_0_3_5_9_vs_7_8") # "imb_yeast6",
all_plots <- lapply(imbalance2, append_plot, metric = "F1", input = "numerical")
# binary datasets: ratio >= 9
imbalance2 <- c("imb_glass2", "imb_glass4", "imb_glass5", "imb_ecoli4",
"imb_ecoli_0_1_4_6_vs_5", "imb_eecoli_0_1_4_7_vs_2_3_5_6",
"imb_ecoli_0_6_7_vs_5", "imb_ecoli_0_1_4_7_vs_5_6",
"imb_yeast_0_3_5_9_vs_7_8") # "imb_yeast6",
all_plots <- lapply(imbalance2, append_plot, metric = "F1", input = "numerical")
# binary datasets: ratio >= 9
imbalance2 <- c("imb_glass2", "imb_glass4", "imb_glass5", "imb_ecoli4",
"imb_ecoli_0_1_4_6_vs_5", "imb_ecoli_0_1_4_7_vs_2_3_5_6",
"imb_ecoli_0_6_7_vs_5", "imb_ecoli_0_1_4_7_vs_5_6",
"imb_yeast_0_3_5_9_vs_7_8") # "imb_yeast6",
all_plots <- lapply(imbalance2, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 2)
figure
# binary datasets: ratio between 1.5 and 9
imbalance1 <- c("imb_ecoli_0_vs_1", "imb_glass0", "imb_glass1", "imb_glass6", "imb_haberman", "imb_iris0", "imb_wisconsin")
# binary datasets: ratio >= 9
imbalance2 <- c("imb_glass2", "imb_glass4", "imb_glass5", "imb_ecoli4",
"imb_ecoli_0_1_4_6_vs_5", "imb_ecoli_0_1_4_7_vs_2_3_5_6",
"imb_ecoli_0_6_7_vs_5", "imb_ecoli_0_1_4_7_vs_5_6",
"imb_yeast_0_3_5_9_vs_7_8") # "imb_yeast6",
all_plots <- lapply(imbalance2, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE,
ncol = 3, nrow = 3)
figure
save_fit <- function(name, caret) {
if(caret) {
named <- paste0("fit_", name, "_d")
namer <- paste0("fit_", name, "_r")
d <- get(named)
r <- get(namer)
save(list = c(named, namer), file = paste0("experiments/results/5cv/keel/imbalance/ratio2/", name, ".RData"))
}
else {
save(list = name, file = paste0("experiments/results/5cv/keel/imbalance/ratio2/", name, ".RData"))
}
}
lapply(imbalance2, save_fit, caret = TRUE)
