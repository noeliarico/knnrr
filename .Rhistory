}
}
grid <- grid %>% mutate(type = ifelse(method %in% distances, "distance", "rr"))
return(grid)
}
ecoli_20an_cn_5_1 <- train_keel(ecoli_20an_cn_5_1tra, ecoli_20an_cn_5_1tst)
ecoli_20an_cn_5_1
source('~/Desktop/Github/knnrr/experiments/keel/noisy/an/cn/an_cn20.R')
ecoli_20an_cn
glass_20an_cn
ionosphere_20an_cn
ionosphere_20an_cn_5_1
ionosphere_20an_cn_5_2
train_keel  <- function(train, test, verbose = FALSE) {
train_features <- train[,-1]
train_class <- train[,1]
test_features <- test[,-1]
test_class <- test[,1]
distances <- get_distances("numerical")
ks = c(1,2,3,5,7)
ranking_rules <- c("plurality", "borda_count", "two", "three", "five", "seven")
method <- c(distances, ranking_rules)
grid <- expand.grid(method = method, k = ks, F1 = 0, Balanced_Accuracy = 0, Kappa = 0) %>%
mutate(k = as.factor(k),
method = as.factor(method))
for(d in distances) {
out <- dknnfTrain(train_features, test_features, cl = train_class,
distance = d, ties = "randomly", verbose = verbose, developer = verbose)
for(the_k in ks) {
pred <- factor(predict_for_k(out$distances, out$cl, ties = "randomly", k = the_k), levels = levels(train_class))
cm <- caret::confusionMatrix(pred, test_class)
if(length(unique(train_class)) > 2) {
v <- cm$byClass[,'F1']
v[is.na(v)] <- 0
f <- mean(v)
v <- cm$byClass[,'Balanced Accuracy']
v[is.na(v)] <- 0
ba <- mean(v)
}
else {
f <- F_meas(cm$table)
print(cm)
ba <- cm$Balanced_Accuracy
print(ba)
}
grid <- grid %>%
mutate(F1 = replace(F1, (method == d & k == the_k), f),
Balanced_Accuracy = replace(Balanced_Accuracy, (method == d & k == the_k), ba),
Kappa = replace(Kappa, (method == d & k == the_k), cm$overall['Kappa'])) %>%
as.data.frame()
}
}
for(the_rr in ranking_rules) {
out <- knn4Train(train_features, test_features, cl = train_class,
rr = the_rr, atttype = "numerical", developer = verbose)
for(the_k in ks) {
pred <- factor(predict_using_por(out, ties = "randomly", k = the_k), levels = levels(train_class))
cm <- caret::confusionMatrix(pred, test_class)
if(length(unique(train_class)) > 2) {
v <- cm$byClass[,'F1']
v[is.na(v)] <- 0
f <- mean(v)
v <- cm$byClass[,'Balanced Accuracy']
v[is.na(v)] <- 0
ba <- mean(v)
}
else {
f <- F_meas(cm$table)
}
grid <- grid %>%
mutate(F1 = replace(F1, (method == the_rr & k == the_k), f),
Balanced_Accuracy = replace(Balanced_Accuracy, (method == d & k == the_k), ba),
Kappa = replace(Kappa, (method == the_rr & k == the_k), cm$overall['Kappa'])) %>%
as.data.frame()
}
}
grid <- grid %>% mutate(type = ifelse(method %in% distances, "distance", "rr"))
return(grid)
}
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
confusionMatrix(fit_cpu_discretized_d)
confusionMatrix(fit_ionospheren_d)
confusionMatrix(fit_ionospheren_d)
train_keel  <- function(train, test, verbose = FALSE) {
train_features <- train[,-1]
train_class <- train[,1]
test_features <- test[,-1]
test_class <- test[,1]
distances <- get_distances("numerical")
ks = c(1,2,3,5,7)
ranking_rules <- c("plurality", "borda_count", "two", "three", "five", "seven")
method <- c(distances, ranking_rules)
grid <- expand.grid(method = method, k = ks, F1 = 0, Balanced_Accuracy = 0, Kappa = 0) %>%
mutate(k = as.factor(k),
method = as.factor(method))
for(d in distances) {
out <- dknnfTrain(train_features, test_features, cl = train_class,
distance = d, ties = "randomly", verbose = verbose, developer = verbose)
for(the_k in ks) {
pred <- factor(predict_for_k(out$distances, out$cl, ties = "randomly", k = the_k), levels = levels(train_class))
cm <- caret::confusionMatrix(pred, test_class)
if(length(unique(train_class)) > 2) {
v <- cm$byClass[,'F1']
v[is.na(v)] <- 0
f <- mean(v)
v <- cm$byClass[,'Balanced Accuracy']
v[is.na(v)] <- 0
ba <- mean(v)
}
else {
f <- F_meas(cm$table)
print(cm)
ba <- cm$Balanced_Accuracy
print(ba)
}
grid <- grid %>%
mutate(F1 = replace(F1, (method == d & k == the_k), f),
Balanced_Accuracy = replace(Balanced_Accuracy, (method == d & k == the_k), ba),
Kappa = replace(Kappa, (method == d & k == the_k), cm$overall['Kappa'])) %>%
as.data.frame()
}
}
for(the_rr in ranking_rules) {
out <- knn4Train(train_features, test_features, cl = train_class,
rr = the_rr, atttype = "numerical", developer = verbose)
for(the_k in ks) {
pred <- factor(predict_using_por(out, ties = "randomly", k = the_k), levels = levels(train_class))
cm <- caret::confusionMatrix(pred, test_class)
if(length(unique(train_class)) > 2) {
v <- cm$byClass[,'F1']
v[is.na(v)] <- 0
f <- mean(v)
v <- cm$byClass[,'Balanced Accuracy']
v[is.na(v)] <- 0
ba <- mean(v)
}
else {
f <- F_meas(cm$table)
print(cm$table)
print(cm$byClass)
}
grid <- grid %>%
mutate(F1 = replace(F1, (method == the_rr & k == the_k), f),
Balanced_Accuracy = replace(Balanced_Accuracy, (method == d & k == the_k), ba),
Kappa = replace(Kappa, (method == the_rr & k == the_k), cm$overall['Kappa'])) %>%
as.data.frame()
}
}
grid <- grid %>% mutate(type = ifelse(method %in% distances, "distance", "rr"))
return(grid)
}
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
train_keel  <- function(train, test, verbose = FALSE) {
train_features <- train[,-1]
train_class <- train[,1]
test_features <- test[,-1]
test_class <- test[,1]
distances <- get_distances("numerical")
ks = c(1,2,3,5,7)
ranking_rules <- c("plurality", "borda_count", "two", "three", "five", "seven")
method <- c(distances, ranking_rules)
grid <- expand.grid(method = method, k = ks, F1 = 0, Balanced_Accuracy = 0, Kappa = 0) %>%
mutate(k = as.factor(k),
method = as.factor(method))
for(d in distances) {
out <- dknnfTrain(train_features, test_features, cl = train_class,
distance = d, ties = "randomly", verbose = verbose, developer = verbose)
for(the_k in ks) {
pred <- factor(predict_for_k(out$distances, out$cl, ties = "randomly", k = the_k), levels = levels(train_class))
cm <- caret::confusionMatrix(pred, test_class)
if(length(unique(train_class)) > 2) {
v <- cm$byClass[,'F1']
v[is.na(v)] <- 0
f <- mean(v)
v <- cm$byClass[,'Balanced Accuracy']
v[is.na(v)] <- 0
ba <- mean(v)
}
else {
f <- F_meas(cm$table)
print(cm)
ba <- cm$Balanced_Accuracy
print(ba)
}
grid <- grid %>%
mutate(F1 = replace(F1, (method == d & k == the_k), f),
Balanced_Accuracy = replace(Balanced_Accuracy, (method == d & k == the_k), ba),
Kappa = replace(Kappa, (method == d & k == the_k), cm$overall['Kappa'])) %>%
as.data.frame()
}
}
for(the_rr in ranking_rules) {
out <- knn4Train(train_features, test_features, cl = train_class,
rr = the_rr, atttype = "numerical", developer = verbose)
for(the_k in ks) {
pred <- factor(predict_using_por(out, ties = "randomly", k = the_k), levels = levels(train_class))
cm <- caret::confusionMatrix(pred, test_class)
if(length(unique(train_class)) > 2) {
v <- cm$byClass[,'F1']
v[is.na(v)] <- 0
f <- mean(v)
v <- cm$byClass[,'Balanced Accuracy']
v[is.na(v)] <- 0
ba <- mean(v)
}
else {
f <- F_meas(cm$table)
print(cm$byClass)
}
grid <- grid %>%
mutate(F1 = replace(F1, (method == the_rr & k == the_k), f),
Balanced_Accuracy = replace(Balanced_Accuracy, (method == d & k == the_k), ba),
Kappa = replace(Kappa, (method == the_rr & k == the_k), cm$overall['Kappa'])) %>%
as.data.frame()
}
}
grid <- grid %>% mutate(type = ifelse(method %in% distances, "distance", "rr"))
return(grid)
}
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
cm
rm(cm)
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
confm
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
cm <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
cm
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
confm
confm$byClass
confm$byClass['Balanced Accuracy']
rm(confm)
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
ionosphere_20an_cn_5_2 <- train_keel(ionosphere_20an_cn_5_2tra, ionosphere_20an_cn_5_2tst)
ionosphere_20an_cn_5_3 <- train_keel(ionosphere_20an_cn_5_3tra, ionosphere_20an_cn_5_3tst)
ionosphere_20an_cn_5_4 <- train_keel(ionosphere_20an_cn_5_4tra, ionosphere_20an_cn_5_4tst)
ionosphere_20an_cn_5_5 <- train_keel(ionosphere_20an_cn_5_5tra, ionosphere_20an_cn_5_5tst)
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
ionosphere_20an_cn_5_2 <- train_keel(ionosphere_20an_cn_5_2tra, ionosphere_20an_cn_5_2tst)
ionosphere_20an_cn_5_3 <- train_keel(ionosphere_20an_cn_5_3tra, ionosphere_20an_cn_5_3tst)
ionosphere_20an_cn_5_4 <- train_keel(ionosphere_20an_cn_5_4tra, ionosphere_20an_cn_5_4tst)
ionosphere_20an_cn_5_5 <- train_keel(ionosphere_20an_cn_5_5tra, ionosphere_20an_cn_5_5tst)
source('~/Desktop/Github/knnrr/experiments/train_without_caret.R')
ionosphere_20an_cn_5_1 <- train_keel(ionosphere_20an_cn_5_1tra, ionosphere_20an_cn_5_1tst)
ionosphere_20an_cn_5_2 <- train_keel(ionosphere_20an_cn_5_2tra, ionosphere_20an_cn_5_2tst)
ionosphere_20an_cn_5_3 <- train_keel(ionosphere_20an_cn_5_3tra, ionosphere_20an_cn_5_3tst)
ionosphere_20an_cn_5_4 <- train_keel(ionosphere_20an_cn_5_4tra, ionosphere_20an_cn_5_4tst)
ionosphere_20an_cn_5_5 <- train_keel(ionosphere_20an_cn_5_5tra, ionosphere_20an_cn_5_5tst)
ionosphere_20an_cn <- bind_rows(ionosphere_20an_cn_5_1,
ionosphere_20an_cn_5_2,
ionosphere_20an_cn_5_3,
ionosphere_20an_cn_5_4,
ionosphere_20an_cn_5_5,) %>%
group_by(k, method, type) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
sonar_20an_cn_5_1
sonar_20an_cn_5_1 <- train_keel(sonar_20an_cn_5_1tra, sonar_20an_cn_5_1tst)
sonar_20an_cn_5_2 <- train_keel(sonar_20an_cn_5_2tra, sonar_20an_cn_5_2tst)
sonar_20an_cn_5_3 <- train_keel(sonar_20an_cn_5_3tra, sonar_20an_cn_5_3tst)
sonar_20an_cn_5_4 <- train_keel(sonar_20an_cn_5_4tra, sonar_20an_cn_5_4tst)
sonar_20an_cn_5_5 <- train_keel(sonar_20an_cn_5_5tra, sonar_20an_cn_5_5tst)
sonar_20an_cn <- bind_rows(sonar_20an_cn_5_1,
sonar_20an_cn_5_2,
sonar_20an_cn_5_3,
sonar_20an_cn_5_4,
sonar_20an_cn_5_5,) %>%
group_by(k, method, type) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
wine_20an_cn_5_1 <- train_keel(wine_20an_cn_5_1tra, wine_20an_cn_5_1tst)
wine_20an_cn_5_2 <- train_keel(wine_20an_cn_5_2tra, wine_20an_cn_5_2tst)
wine_20an_cn_5_3 <- train_keel(wine_20an_cn_5_3tra, wine_20an_cn_5_3tst)
wine_20an_cn_5_4 <- train_keel(wine_20an_cn_5_4tra, wine_20an_cn_5_4tst)
wine_20an_cn_5_5 <- train_keel(wine_20an_cn_5_5tra, wine_20an_cn_5_5tst)
wine_20an_cn <- bind_rows(wine_20an_cn_5_1,
wine_20an_cn_5_2,
wine_20an_cn_5_3,
wine_20an_cn_5_4,
wine_20an_cn_5_5,) %>%
group_by(k, method, type) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
source('~/Desktop/Github/knnrr/experiments/keel/noisy/an/an_cn5.R')
save_fit <- function(name, caret) {
if(caret) {
named <- paste0("fit_", name, "_d")
namer <- paste0("fit_", name, "_r")
d <- get(named)
r <- get(namer)
save(list = c(named, namer), file = paste0("experiments/results/5cv/", name, ".RData"))
}
else {
save(list = name, file = paste0("experiments/results/5cv/", name, ".RData"))
}
}
lapply(trained, save_fit, caret = TRUE)
load("../ndata/ndata/all.RData")
sonar_20an_cn_5_1 <- train_keel(sonar_20an_cn_5_1tra, sonar_20an_cn_5_1tst)
sonar_20an_cn_5_2 <- train_keel(sonar_20an_cn_5_2tra, sonar_20an_cn_5_2tst)
sonar_20an_cn_5_3 <- train_keel(sonar_20an_cn_5_3tra, sonar_20an_cn_5_3tst)
sonar_20an_cn_5_4 <- train_keel(sonar_20an_cn_5_4tra, sonar_20an_cn_5_4tst)
sonar_20an_cn_5_5 <- train_keel(sonar_20an_cn_5_5tra, sonar_20an_cn_5_5tst)
sonar_20an_cn <- bind_rows(sonar_20an_cn_5_1,
sonar_20an_cn_5_2,
sonar_20an_cn_5_3,
sonar_20an_cn_5_4,
sonar_20an_cn_5_5,) %>%
group_by(k, method, type) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
sonar_5an_cn_5_1 <- train_keel(sonar_5an_cn_5_1tra, sonar_5an_cn_5_1tst)
sonar_5an_cn_5_2 <- train_keel(sonar_5an_cn_5_2tra, sonar_5an_cn_5_2tst)
sonar_5an_cn_5_3 <- train_keel(sonar_5an_cn_5_3tra, sonar_5an_cn_5_3tst)
sonar_5an_cn_5_4 <- train_keel(sonar_5an_cn_5_4tra, sonar_5an_cn_5_4tst)
sonar_5an_cn_5_5 <- train_keel(sonar_5an_cn_5_5tra, sonar_5an_cn_5_5tst)
sonar_5an_cn <- bind_rows(sonar_5an_cn_5_1,
sonar_5an_cn_5_2,
sonar_5an_cn_5_3,
sonar_5an_cn_5_4,
sonar_5an_cn_5_5,) %>%
group_by(k, method, type) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup()
ecoli_20an_nc_5_1
source('~/Desktop/Github/knnrr/experiments/keel/noisy/an/an_nc20.R')
all_plots <- lapply(numerical, append_plot, metric = "F1", input = "numerical")
source('~/Desktop/Github/knnrr/subsets.R')
all_plots <- lapply(numerical, append_plot, metric = "F1", input = "numerical")
trained <- c("cpu_discretized",
"ecoli",
"ecoli4",
"ecoli_0_vs_1",
"ecoli_0_1_4_6_vs_5",
"ecoli_0_1_4_7_vs_2_3_5_6",
"ecoli_0_1_4_7_vs_5_6",
"ecoli_0_6_7_vs_5",
"filtered_ecoli",
"iris",
"iris0",
"glass",
"glass0",
"glass1",
"glass2",
"glass4",
"glass5",
"glass6",
"haberman",
"ionospheren",
"life_expectancy",
"mini_audit_risk",
"mini_banknote",
"mini_contraceptive",
"mini_contraceptiven",
"mini_egg_eye_state",
"mini_penbased",
"mini_shuttle",
"mini_skin",
"mini_weight_height",
"mini_wifi_localization",
"mini_yeast",
"new_thyroid",
"seeds",
"sonar",
"vertebral_column2",
"vertebral_column3",
"wine",
"wisconsin",
"yeast_0_3_5_9_vs_7_8"
#"yeast",
#"yeast6"
)
data_all_info <- output_details(data_info$name)
data_trained <- data_all_info %>% filter(name %in% trained)
numerical <- data_trained %>% filter(type == "numerical")
numerical_binary <- numerical %>% filter(classes == 2)
numerical_binary_imb1 <- numerical_binary %>% filter(imbalance_ratio < 9)
numerical_binary_imb2 <- numerical_binary %>% filter(imbalance_ratio >= 9)
numerical_binary_l10att <- numerical_binary %>% filter(features < 10)
numerical_binary_m10att <- numerical_binary %>% filter(features >= 10)
numerical_multiclass <- numerical %>% filter(classes > 2)
all_plots <- lapply(numerical, append_plot, metric = "F1", input = "numerical")
trained <- c("cpu_discretized",
"ecoli",
"ecoli4",
"ecoli_0_vs_1",
"ecoli_0_1_4_6_vs_5",
"ecoli_0_1_4_7_vs_2_3_5_6",
"ecoli_0_1_4_7_vs_5_6",
"ecoli_0_6_7_vs_5",
"filtered_ecoli",
"iris",
"iris0",
"glass",
"glass0",
"glass1",
"glass2",
"glass4",
"glass5",
"glass6",
"haberman",
"ionospheren",
"life_expectancy",
"mini_audit_risk",
"mini_banknote",
"mini_contraceptive",
"mini_contraceptiven",
"mini_egg_eye_state",
"mini_penbased",
"mini_shuttle",
"mini_skin",
"mini_weight_height",
"mini_wifi_localization",
"mini_yeast",
"new_thyroid",
"seeds",
"sonar",
"vertebral_column2",
"vertebral_column3",
"wine",
"wisconsin",
"yeast_0_3_5_9_vs_7_8"
#"yeast",
#"yeast6"
)
data_all_info <- output_details(data_info$name)
data_all_info
data_trained <- data_all_info %>% filter(name %in% trained)
data_trained
numerical <- data_trained %>% filter(type == "numerical")
numerical
numerical_binary <- numerical %>% filter(classes == 2)
numerical_binary
numerical_binary_imb1 <- numerical_binary %>% filter(imbalance_ratio < 9)
numerical_binary_imb2 <- numerical_binary %>% filter(imbalance_ratio >= 9)
numerical_binary_l10att <- numerical_binary %>% filter(features < 10)
numerical_binary_m10att <- numerical_binary %>% filter(features >= 10)
numerical
all_plots <- lapply(numerical$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
source('~/Desktop/Github/knnrr/experiments/keel/noisy/an/an_nc5.R')
save.image("all.RData")
all_plots <- lapply(numerical_binary$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary$name, append_plot, metric = "Kappa", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary_imb1$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
numerical_binary_imb1
numerical
numerical_binary
all_plots <- lapply(numerical_binary_imb1$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary_imb2$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary_imb2$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary_l10att$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_binary_m10att$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_multiclass$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_multiclass$name, append_plot, metric = "F1", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
all_plots <- lapply(numerical_multiclass$name, append_plot, metric = "Balanced_Accuracy", input = "numerical")
figure <- ggarrange(plotlist = all_plots, common.legend = TRUE)
figure
sink()
mini_mammographic_masses
out <- fitMix(mini_mammographic_masses)
fit_mini_mammographic_masses_d
out
fit_mini_mammographic_masses_d <- out$fitd
fit_mini_mammographic_masses_r <- out$fitr
fit_mini_mammographic_masses_d
fit_mini_mammographic_masses_r
caesarian
out <- fitMix(caesarian)
fit_caesarian_d <- out$fitd
fit_caesarian_r <- out$fitr
fit_caesarian_d
fit_caesarian_r
mini_adult
out <- fitMix(mini_adult)
fit_mini_adult_d <- out$fitd
fit_mini_adult_r <- out$fitr
fit_mini_adult_d
fit_mini_adult_r
save.image("all.RData")
