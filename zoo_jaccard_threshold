-> Train dknn k = 4, distance = jaccard, ties = threshold
nrow(train) = 18 and nrow(test) = 4 
[1] "jaccard"
[1] "jaccard distance..."
  feathers.0 feathers.1 airborne.0 airborne.1 aquatic.0 aquatic.1 predator.1 predator.0 toothed.1 toothed.0 backbone.1 backbone.0 breathes.1 breathes.0 venomous.0 venomous.1 fins.0 fins.1 tail.0
1          1          0          1          0         0         1          0          1         1         0          1          0          0          1          1          0      0      1      0
2          0          1          0          1         1         0          0          1         0         1          1          0          1          0          1          0      1      0      0
3          1          0          1          0         1         0          1          0         0         1          0          1          0          1          1          0      1      0      1
4          1          0          1          0         0         1          0          1         1         0          1          0          0          1          1          0      0      1      0
5          0          1          0          1         1         0          1          0         0         1          1          0          1          0          1          0      1      0      0
6          0          1          1          0         1         0          1          0         0         1          1          0          1          0          1          0      1      0      0
  tail.1 domestic.0 domestic.1 catsize.1 catsize.0
1      1          0          1         0         1
2      1          0          1         0         1
3      0          1          0         0         1
4      1          1          0         0         1
5      1          1          0         0         1
6      1          1          0         0         1

Matrix of distances:
           1         2         3         4         5         6         7         8         9        10        11        12        13        14        15        16        17        18
19 0.5345225 0.8944272 0.7669650 0.3922323 0.8164966 0.7669650 0.7669650 0.3922323 0.7669650 0.7669650 0.7669650 0.8583951 0.3922323 0.8583951 0.5345225 0.8583951 0.3922323 0.8583951
20 0.8164966 0.8944272 0.3922323 0.7669650 0.8164966 0.7669650 0.3922323 0.7669650 0.3922323 0.7669650 0.7669650 0.6324555 0.7669650 0.8583951 0.8164966 0.8583951 0.7669650 0.8583951
21 0.8583951 0.6324555 0.8164966 0.8164966 0.3922323 0.5345225 0.8164966 0.8164966 0.8164966 0.0000000 0.0000000 0.8164966 0.8164966 0.5345225 0.8583951 0.5345225 0.8164966 0.5345225
22 0.8583951 0.7669650 0.8164966 0.8164966 0.6324555 0.5345225 0.7071068 0.7071068 0.8164966 0.5345225 0.5345225 0.8164966 0.8164966 0.7071068 0.7669650 0.5345225 0.7071068 0.7071068

Ranking for each instance:
   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
19 2 6 3 1 4 3 3 1 3  3  3  5  1  5  2  5  1  5
20 4 6 1 3 4 3 1 3 1  3  3  2  3  5  4  5  3  5
21 6 4 5 5 2 3 5 5 5  1  1  5  5  3  6  3  5  3
22 6 4 5 5 2 1 3 3 5  1  1  5  5  3  4  1  3  3
function (distances, cl, ties, k = 3)
{
  cat("--------> Predict_for_k function with ties = ", as.character(ties), " and k = ", k, "\n", sep = "")
  # the labels vector will store the output of all the  
  labels <- rep(0, nrow(distances))
  # for each row in the matrix with the rankings
  # i.e.: for each instance in the test set
  for(indexrow in 1:nrow(distances)) {
    # use the index for getting the ranking
    x <- distances[indexrow, ]
    names(x) <- cl
    labels[indexrow] <- chooseBest(x, method = ties, k = k)
  }
  
  return(labels)
}
<bytecode: 0x7ffabfcf7238>
